record Do.State {
  greeting: String
}

component Do {
  state : Do.State {
    greeting = "ho"
  }

  fun test : Void {
    do {
      greeting = "hello"
      next { greeting = greeting }
    }
  }

  fun render : Html {
    <div/>
  }
}
--------------------------------------------------------------------------------
class $$Do_State extends Record {}

$$Do_State.mappings = {
  "greeting": null
}

$$Do_State.decode = (input) => {
  let greeting = Decoder.field(`greeting`, Decoder.string)(input)
  if (greeting instanceof Err) {
    return greeting
  }

  return new Ok(new $$Do_State({
    greeting: greeting.value
  }))
}

class $Do extends Component {
  constructor(props) {
    super(props)
    this.state = new $$Do_State({
      greeting: `ho`
    })
  }

  test() {
    return (async () => {
      try {
        let greeting = await `hello`

        await new Promise((_resolve) => {
          this.setState(new $$Do_State({
            greeting: greeting
          }), _resolve)
        })
      } catch (_error) {
        if (_error instanceof DoError) {} else {
          console.warn(`Unhandled error in do statement`)
          console.log(_error)
        }
      }
    })()
  }

  render() {
    return _createElement("div", {})
  }
}

$Do.displayName = "Do"
