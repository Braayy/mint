record X.Y {
  blah : String
}

record X {
  name : String,
  y: X.Y
}

component A {
  fun x (input : Object) : Result(Object.Error, x) {
    decode input as X
  }

  fun render : Html {
    <div/>
  }
}
--------------------------------------------------------------------------------
class $$X_Y extends Record {}

$$X_Y.mappings = {
  "blah": null
}

$$X_Y.decode = (_input) => {
  let blah = Decoder.field(`blah`, Decoder.string)(_input)
  if (blah instanceof Err) {
    return blah
  }

  return new Ok(new $$X_Y({
    blah: blah.value
  }))
}

class $$X extends Record {}

$$X.mappings = {
  "name": null,
  "y": null
}

$$X.decode = (_input) => {
  let name = Decoder.field(`name`, Decoder.string)(_input)
  if (name instanceof Err) {
    return name
  }

  let y = Decoder.field(`y`, $$X_Y.decode)(_input)
  if (y instanceof Err) {
    return y
  }

  return new Ok(new $$X({
    name: name.value,
    y: y.value
  }))
}

class $A extends Component {
  x(input) {
    return $$X.decode(input)
  }

  render() {
    return _createElement("div", {})
  }
}

$A.displayName = "A"
