record X.Y {
  blah : String
}

record X {
  name : String,
  y: X.Y
}

component Main {
  fun x (input : Object) : Result(Object.Error, x) {
    decode input as X
  }

  fun render : String {
    try {
      x(``)

      ""
    }
  }
}
--------------------------------------------------------------------------------
class A extends Record {}

A.mappings = {
  a: null
}

A.decode = (_input) => {
  let a = Decoder.field(`blah`, Decoder.string)(_input)
  if (a instanceof Err) { return a }

  return new Ok(new A({
    a: a.value
  }))
}

class B extends Record {}

B.mappings = {
  a: null,
  b: null
}

B.decode = (_input) => {
  let a = Decoder.field(`name`, Decoder.string)(_input)
  if (a instanceof Err) { return a }

  let b = Decoder.field(`y`, A.decode)(_input)
  if (b instanceof Err) { return b }

  return new Ok(new B({
    a: a.value,
    b: b.value
  }))
}

class C extends Component {
  a(b) {
    return B.decode(b)
  }

  render() {
    return (() => {
      let _0 = this.a();

      if (_0 instanceof Err) {
        let _error = _0.value
        return _catch_all()
      }

      _0.value;

      return ``
    })()
  }
}

C.displayName = "Main"
