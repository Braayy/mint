module Promise {
  fun reject (input : a) : Promise(a, b) {
    ``
  }
}

component Do {
  fun test : Void {
    do {
      greeting =
        Promise.reject("hello")

      void
    } catch String => a {
      void
    }
  }

  fun render : Html {
    <div/>
  }
}
--------------------------------------------------------------------------------
const $Promise = new(class {
  reject(input) {
    return
  }
})

class $Do extends Component {
  test() {
    return (async () => {
      try {
        let greeting = await (async () => {
          try {
            return await $Promise.reject(`hello`)
          } catch (_error) {
            let a = _error;
            null

            throw new DoError
          }
        })()

        await null
      } catch (_error) {
        if (_error instanceof DoError) {} else {
          console.warn(`Unhandled error in do statement`)
          console.log(_error)
        }
      }
    })()
  }

  render() {
    return _createElement("div", {})
  }
}

$Do.displayName = "Do"
