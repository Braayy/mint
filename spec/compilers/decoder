record Y  {
  size : Number using "SIIIZEEE"
}

record X {
  string : String,
  number : Number,
  bool : Bool,
  time : Time,
  maybe : Maybe(String),
  array : Array(String),
  y : Y
}

component Main {
  fun x (input : Object) : Result(Object.Error, x) {
    decode input as X
  }

  fun render : String {
    try {
      x(``)

      ""
    }
  }
}
--------------------------------------------------------------------------------
class A extends Record {}

A.mappings = {
  a: "SIIIZEEE"
}

A.decode = (_input) => {
  let a = Decoder.field(`SIIIZEEE`, Decoder.number)(_input)
  if (a instanceof Err) { return a }

  return new Ok(new A({
    a: a.value
  }))
}

class B extends Record {}

B.mappings = {
  a: null,
  b: null,
  c: null,
  d: null,
  e: null,
  f: null,
  g: null
}

B.decode = (_input) => {
  let a = Decoder.field(`string`, Decoder.string)(_input)
  if (a instanceof Err) { return a }

  let b = Decoder.field(`number`, Decoder.number)(_input)
  if (b instanceof Err) { return b }

  let c = Decoder.field(`bool`, Decoder.boolean)(_input)
  if (c instanceof Err) { return c }

  let d = Decoder.field(`time`, Decoder.time)(_input)
  if (d instanceof Err) { return d }

  let e = Decoder.field(`maybe`, Decoder.maybe(Decoder.string))(_input)
  if (e instanceof Err) { return e }

  let f = Decoder.field(`array`, Decoder.array(Decoder.string))(_input)
  if (f instanceof Err) { return f }

  let g = Decoder.field(`y`, A.decode)(_input)
  if (g instanceof Err) { return g }

  return new Ok(new B({
    a: a.value,
    b: b.value,
    c: c.value,
    d: d.value,
    e: e.value,
    f: f.value,
    g: g.value
  }))
}

class C extends Component {
  a(b) {
    return B.decode(b)
  }

  render() {
    return (() => {
      let _0 = this.a();

      if (_0 instanceof Err) {
        let _error = _0.value
        return _catch_all()
      }

      _0.value;

      return ``
    })()
  }
}

C.displayName = "Main"
