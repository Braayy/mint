record Y  {
  size : Number using "SIIIZEEE"
}

record X {
  string : String,
  number : Number,
  bool : Bool,
  time : Time,
  maybe : Maybe(String),
  array : Array(String),
  y : Y
}

component Main {
  fun x (input : Object) : Result(Object.Error, x) {
    decode input as X
  }

  fun render : String {
    try {
      x(``)

      ""
    }
  }
}
--------------------------------------------------------------------------------
const A = _createRecord({
  a: [
    "SIIIZEEE",
    Decoder.number
  ]
})

const B = _createRecord({
  a: [
    "string",
    Decoder.string
  ],
  b: [
    "number",
    Decoder.number
  ],
  c: [
    "bool",
    Decoder.boolean
  ],
  d: [
    "time",
    Decoder.time
  ],
  e: [
    "maybe",
    Decoder.maybe(Decoder.string)
  ],
  f: [
    "array",
    Decoder.array(Decoder.string)
  ],
  g: [
    "y",
    ((_)=>A.decode(_))
  ]
})

class C extends _C {
  a(b) {
    return ((_)=>B.decode(_))(b)
  }

  render() {
    return (() => {
      let _0 = this.a();

      if (_0 instanceof Err) {
        let _error = _0.value
        return _catch_all()
      }

      _0.value;

      return ``
    })()
  }
}

C.displayName = "Main"
