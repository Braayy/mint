record MouseProvider.Data {
  moves : Function(Position, Void),
  ups : Function(Position, Void)
}

provider MouseProvider : MouseProvider.Data {
  fun attach : Void {
    void
  }
}

store Blah {
  state test : String = ""

  fun x : String {
    "hello"
  }
}

component Main {
  use MouseProvider {
    moves = (data : Position) : Void { void },
    ups = (data : Position) : Void { void }
  } when {
    false
  }

  connect Blah exposing { test, x }

  fun render : Html {
    <div/>
  }
}
--------------------------------------------------------------------------------
class A extends Record {}

A.mappings = {
  a: "moves",
  b: "ups"
}

A.decode = () => {
  console.warn('Cannot decode this record!')
}

const B = new(class extends Provider {
  attach() {
    return null
  }
})

class C extends Component {
  get d() {
    return D.c
  }

  f (...params) { return D.e(...params) }

  componentWillUnmount() {
    D._unsubscribe(this)
    B._unsubscribe(this)
  }

  componentDidUpdate() {
    if (false) {
      B._subscribe(this, new A({
      a: (a) => {
        return null
      },
      b: (b) => {
        return null
      }
    }))
    } else {
      B._unsubscribe(this)
    }
  }

  componentDidMount() {
    D._subscribe(this)

    if (false) {
      B._subscribe(this, new A({
      a: (a) => {
        return null
      },
      b: (b) => {
        return null
      }
    }))
    } else {
      B._unsubscribe(this)
    }
  }

  render() {
    return _createElement("div", {})
  }
}

C.displayName = "Main"

const D = new(class extends Store {
  constructor() {
    super()

    this.state = {
      c: ``
    }
  }

  get c() {
    return this.state.c
  }

  e() {
    return `hello`
  }
})
