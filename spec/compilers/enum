enum Test(a) {
  X
  Y
  Z(Result(a, Number))
}

enum Result(error, value) {
  Error(error)
  Ok(value)
  Other(error, value)
}

module X {
  fun a : Test(a) {
    Test::X
  }

  fun b : Result(String, String) {
    Result::Other("", "")
  }

  fun c : Test(String) {
    Test::Z(Result::Error(""))
  }
}
--------------------------------------------------------------------------------
class $$Test_X extends Enum {
  constructor() {
    super()

    this.length = 0
  }
};
class $$Test_Y extends Enum {
  constructor() {
    super()

    this.length = 0
  }
};
class $$Test_Z extends Enum {
  constructor(_0) {
    super()

    this._0 = _0

    this.length = 1
  }
};

class $$Result_Error extends Enum {
  constructor(_0) {
    super()

    this._0 = _0

    this.length = 1
  }
};
class $$Result_Ok extends Enum {
  constructor(_0) {
    super()

    this._0 = _0

    this.length = 1
  }
};
class $$Result_Other extends Enum {
  constructor(_0, _1) {
    super()

    this._0 = _0
    this._1 = _1

    this.length = 2
  }
};

const $X = new(class {
  a() {
    return new $$Test_X()
  }

  b() {
    return new $$Result_Other(``, ``)
  }

  c() {
    return new $$Test_Z(new $$Result_Error(``))
  }
})
