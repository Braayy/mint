component Main {
  fun test : Promise(Never, String) {
    parallel {
      [a, b, ...rest] =
        ["hello", "bello"]
    } then {
      case (rest) {
        [c, d] => c + d
      }
    }
  }

  fun render : String {
    try {
      test()

      ""
    }
  }
}
--------------------------------------------------------------------------------
class A extends _C {
  a() {
    return (async () => {
      let _ = null;

      try {
        let b = null;
        let c = null;
        let d = null;

        await Promise.all([
          (async () => {
            const __ = Array.from(await [`hello`, `bello`]);
            b = __.shift();
            c = __.shift();
            d = __;
          })()
        ]);

        _ = (() => {
          let e = d;

          if (Array.isArray(e) && e.length === 2) {
            const [f,g] = e;
            return f + g;
          };
        })();
      } catch (_error) {
        if (!(_error instanceof DoError)) {
          console.warn(`Unhandled error in parallel expression:`);
          console.warn(_error);
        }
      };

      return _;
    })();
  }

  render() {
    return (() => {
      this.a();
      return ``;
    })();
  }
};

A.displayName = "Main";
