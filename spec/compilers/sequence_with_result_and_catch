module Result {
  fun error (input : a) : Result(a, b) {
    `new Err(arguments[0])`
  }
}

component Main {
  fun test : Promise(Never, String) {
    sequence {
      Result.error("")

      "test"
    } catch String => error {
      "test"
    }
  }

  fun render : Html {
    try {
      test()

      <div/>
    }
  }
}
--------------------------------------------------------------------------------
const B = new(class extends Module {
  b(c) {
    return new Err(arguments[0])
  }
})

class A extends Component {
  a() {
    return (async () => {
      let _ = null

      try {
        let _0 = B.b(``)

        if (_0 instanceof Err) {
          let _error = _0.value

          let error = _error
          _ = `test`
          throw new DoError()
        }

        _0.value

        _ = await `test`
      } catch (_error) {
        if (!(_error instanceof DoError)) {
          console.warn(`Unhandled error in sequence expression:`)
          console.warn(_error)
        }
      }

      return _
    })()
  }

  render() {
    return (() => {
      this.a()

      return _createElement("div", {})
    })()
  }
}

A.displayName = "Main"
