{"name":"core","dependencies":[],"components":[{"description":"<p>A React portal for the body.</p>\n","name":"Html.Portals.Body","connects":[],"computed-properties":[],"properties":[{"description":"<p>The children to render into the portal</p>\n","default":"[]","type":"Array(Html)","name":"children"}],"functions":[{"description":"<p>Renders the children into the documents body.</p>\n","type":"Html","name":"render","source":"/* Renders the children into the documents body. */\nfun render : Html {\n  `_createPortal(#{children}, document.body)`\n}","arguments":[]}],"providers":[],"states":[]},{"description":"<p>Renders the children if the given condition is true.</p>\n","name":"If","connects":[],"computed-properties":[],"properties":[{"description":"<p>The children to render.</p>\n","default":"[]","type":"Array(Html)","name":"children"},{"description":"<p>The condition.</p>\n","default":"true","type":"Bool","name":"condition"}],"functions":[{"description":null,"type":"Array(Html)","name":"render","source":"fun render : Array(Html) {\n  if (condition) {\n    children\n  } else {\n    []\n  }\n}","arguments":[]}],"providers":[],"states":[]},{"description":"<p>Renders the children if the given condition is false.</p>\n","name":"Unless","connects":[],"computed-properties":[],"properties":[{"description":"<p>The children to render.</p>\n","default":"[]","type":"Array(Html)","name":"children"},{"description":"<p>The condition.</p>\n","default":"true","type":"Bool","name":"condition"}],"functions":[{"description":null,"type":"Array(Html)","name":"render","source":"fun render : Array(Html) {\n  if (!condition) {\n    children\n  } else {\n    []\n  }\n}","arguments":[]}],"providers":[],"states":[]}],"stores":[],"modules":[{"description":"<p>Module for functions to manipulate immutable arrays.</p>\n","name":"Array","functions":[{"description":"<p>Returns the first element of the array as <code>Maybe.just(a)</code> or <code>Maybe.nothing()</code>.</p>\n<pre><code>Array.first([]) == Maybe.nothing()\nArray.first([&quot;a&quot;, &quot;x&quot;]) == Maybe.just(&quot;a&quot;)\n</code></pre>\n","type":"Maybe(a)","name":"first","source":"/*\nReturns the first element of the array as `Maybe.just(a)` or `Maybe.nothing()`.\n\n  Array.first([]) == Maybe.nothing()\n  Array.first([\"a\", \"x\"]) == Maybe.just(\"a\")\n*/\nfun first (array : Array(a)) : Maybe(a) {\n  `\n    (() => {\n      let first = #{array}[0]\n      if (first !== undefined) {\n        return #{Maybe::Just(`first`)}\n      } else {\n        return #{Maybe::Nothing}\n      }\n    })()\n    `\n}","arguments":[{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns the first element of the array or the default value.</p>\n<pre><code>Array.firstWithDefault(&quot;a&quot;, []) == &quot;a&quot;\nArray.firstWithDefault(&quot;a&quot;, [&quot;b&quot;, &quot;x&quot;]) == &quot;b&quot;\n</code></pre>\n","type":"a","name":"firstWithDefault","source":"/*\nReturns the first element of the array or the default value.\n\n  Array.firstWithDefault(\"a\", []) == \"a\"\n  Array.firstWithDefault(\"a\", [\"b\", \"x\"]) == \"b\"\n*/\nfun firstWithDefault (item : a, array : Array(a)) : a {\n  first(array)\n  |> Maybe.withDefault(item)\n}","arguments":[{"type":"a","name":"item"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns the last element of the array as <code>Just(a)</code> or <code>Nothing</code>.</p>\n<pre><code>Array.last([]) == Maybe.nothing()\nArray.last([&quot;x&quot;, &quot;a&quot;]) == Maybe.just(&quot;a&quot;)\n</code></pre>\n","type":"Maybe(a)","name":"last","source":"/*\nReturns the last element of the array as `Just(a)` or `Nothing`.\n\n  Array.last([]) == Maybe.nothing()\n  Array.last([\"x\", \"a\"]) == Maybe.just(\"a\")\n*/\nfun last (array : Array(a)) : Maybe(a) {\n  `\n    (() => {\n      let last = #{array}[#{array}.length - 1]\n      if (last !== undefined) {\n        return #{Maybe::Just(`last`)}\n      } else {\n        return #{Maybe::Nothing}\n      }\n    })()\n    `\n}","arguments":[{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns the last element of the array or the default value.</p>\n<pre><code>Array.lastWithDefault(&quot;a&quot;, []) == &quot;a&quot;\nArray.lastWithDefault(&quot;a&quot;, [&quot;x&quot;, &quot;b&quot;]) == &quot;b&quot;\n</code></pre>\n","type":"a","name":"lastWithDefault","source":"/*\nReturns the last element of the array or the default value.\n\n  Array.lastWithDefault(\"a\", []) == \"a\"\n  Array.lastWithDefault(\"a\", [\"x\", \"b\"]) == \"b\"\n*/\nfun lastWithDefault (item : a, array : Array(a)) : a {\n  last(array)\n  |> Maybe.withDefault(item)\n}","arguments":[{"type":"a","name":"item"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns the size of the array.</p>\n<pre><code>Array.size([]) == 0\nArray.size([1, 2, 3]) == 3\n</code></pre>\n","type":"Number","name":"size","source":"/*\nReturns the size of the array.\n\n  Array.size([]) == 0\n  Array.size([1, 2, 3]) == 3\n*/\nfun size (array : Array(a)) : Number {\n  `#{array}.length`\n}","arguments":[{"type":"Array(a)","name":"array"}]},{"description":"<p>Push an element to the end of an array.</p>\n<pre><code>Array.push(&quot;a&quot;, []) == [&quot;a&quot;]\nArray.push(4, [1, 2, 3]) == [1, 2, 3, 4]\n</code></pre>\n","type":"Array(a)","name":"push","source":"/*\nPush an element to the end of an array.\n\n  Array.push(\"a\", []) == [\"a\"]\n  Array.push(4, [1, 2, 3]) == [1, 2, 3, 4]\n*/\nfun push (item : a, array : Array(a)) : Array(a) {\n  `[...#{array}, #{item}]`\n}","arguments":[{"type":"a","name":"item"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns a new array where the elements are reversed. The first array element\nbecomes the last, and the last array element becomes the first.</p>\n<pre><code>Array.reverse([1, 2, 3]) == [4, 3, 2, 1]\n</code></pre>\n","type":"Array(a)","name":"reverse","source":"/*\nReturns a new array where the elements are reversed. The first array element\nbecomes the last, and the last array element becomes the first.\n\n  Array.reverse([1, 2, 3]) == [4, 3, 2, 1]\n*/\nfun reverse (array : Array(a)) : Array(a) {\n  `#{array}.slice().reverse()`\n}","arguments":[{"type":"Array(a)","name":"array"}]},{"description":"<p>Creates a new array with the results of calling a provided\nfunction on every element in the given array.</p>\n<pre><code>Array.map((number : Number) : Number { number + 1 }, [1, 2, 3]) == [2, 3, 4]\n</code></pre>\n","type":"Array(b)","name":"map","source":"/*\nCreates a new array with the results of calling a provided\nfunction on every element in the given array.\n\n  Array.map((number : Number) : Number { number + 1 }, [1, 2, 3]) == [2, 3, 4]\n*/\nfun map (func : Function(a, b), array : Array(a)) : Array(b) {\n  `#{array}.map(#{func})`\n}","arguments":[{"type":"Function(a, b)","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Creates a new array with the results of calling a provided\nfunction on every element in the given array while providing the index of\nthe element.</p>\n<pre><code>Array.mapWithIndex(\n  (index : Number, number : Number) : Number { number + index }, [1, 2, 3]) == [2, 4, 6]\n</code></pre>\n","type":"Array(b)","name":"mapWithIndex","source":"/*\nCreates a new array with the results of calling a provided\nfunction on every element in the given array while providing the index of\nthe element.\n\n  Array.mapWithIndex(\n    (index : Number, number : Number) : Number { number + index }, [1, 2, 3]) == [2, 4, 6]\n*/\nfun mapWithIndex (func : Function(a, Number, b), array : Array(a)) : Array(b) {\n  `#{array}.map(#{func})`\n}","arguments":[{"type":"Function(a, Number, b)","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns all elements that matches the predicate function.</p>\n<pre><code>Array.select((number : Number) : Bool { number % 2 == 0 }, [1, 2, 3, 4]) == [2, 4]\n</code></pre>\n","type":"Array(a)","name":"select","source":"/*\nReturns all elements that matches the predicate function.\n\n  Array.select((number : Number) : Bool { number % 2 == 0 }, [1, 2, 3, 4]) == [2, 4]\n*/\nfun select (func : Function(a, Bool), array : Array(a)) : Array(a) {\n  `#{array}.filter(#{func})`\n}","arguments":[{"type":"Function(a, Bool)","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns all elements that does not matches the predicate function.</p>\n<pre><code>Array.reject((number : Number) : Bool { number % 2 == 0 }, [1, 2, 3, 4]) == [1, 3]\n</code></pre>\n","type":"Array(a)","name":"reject","source":"/*\nReturns all elements that does not matches the predicate function.\n\n  Array.reject((number : Number) : Bool { number % 2 == 0 }, [1, 2, 3, 4]) == [1, 3]\n*/\nfun reject (func : Function(a, Bool), array : Array(a)) : Array(a) {\n  `#{array}.filter((item) => !#{func}(item))`\n}","arguments":[{"type":"Function(a, Bool)","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Finds the first element in the array that matches the predicate function.</p>\n<pre><code>Array.find((number : Number) : Bool { number % 2 == 0 }, [1, 2, 3, 4]) == Maybe.just(2)\n</code></pre>\n","type":"Maybe(a)","name":"find","source":"/*\nFinds the first element in the array that matches the predicate function.\n\n  Array.find((number : Number) : Bool { number % 2 == 0 }, [1, 2, 3, 4]) == Maybe.just(2)\n*/\nfun find (func : Function(a, Bool), array : Array(a)) : Maybe(a) {\n  `\n    (() => {\n      let item = #{array}.find(#{func})\n\n      if (item != undefined) {\n        return #{Maybe::Just(`item`)}\n      } else {\n        return #{Maybe::Nothing}\n      }\n    })()\n    `\n}","arguments":[{"type":"Function(a, Bool)","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns <code>true</code> if any item in the array matches the prdicate function\n<code>false</code> otherwise.</p>\n<pre><code>Array.any((number : Number) : Bool { number % 2 == 0 }, [1, 2, 3, 4]) == true\nArray.any((number : Number) : Bool { number % 2 == 0 }, [1, 3]) == false\n</code></pre>\n","type":"Bool","name":"any","source":"/*\nReturns `true` if any item in the array matches the prdicate function\n`false` otherwise.\n\n  Array.any((number : Number) : Bool { number % 2 == 0 }, [1, 2, 3, 4]) == true\n  Array.any((number : Number) : Bool { number % 2 == 0 }, [1, 3]) == false\n*/\nfun any (func : Function(a, Bool), array : Array(a)) : Bool {\n  `!!#{array}.find(#{func})`\n}","arguments":[{"type":"Function(a, Bool)","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns a new sorted array using the given sorting function.</p>\n<pre><code>Array.sort((a : Number, b : Number) : Number { a - b }, [4, 1, 3, 2]) == [1, 2, 3, 4]\n</code></pre>\n","type":"Array(a)","name":"sort","source":"/*\nReturns a new sorted array using the given sorting function.\n\n  Array.sort((a : Number, b : Number) : Number { a - b }, [4, 1, 3, 2]) == [1, 2, 3, 4]\n*/\nfun sort (func : Function(a, a, Number), array : Array(a)) : Array(a) {\n  `#{array}.slice().sort(#{func})`\n}","arguments":[{"type":"Function(a, a, Number)","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns a new sorted array using the given functions return as the base of\nthe sorting.</p>\n<pre><code>Array.sortBy((number : Number) : Number { number }, [4, 1, 3, 2]) == [1, 2, 3, 4]\n</code></pre>\n","type":"Array(a)","name":"sortBy","source":"/*\nReturns a new sorted array using the given functions return as the base of\nthe sorting.\n\n\n  Array.sortBy((number : Number) : Number { number }, [4, 1, 3, 2]) == [1, 2, 3, 4]\n*/\nfun sortBy (func : Function(a, b), array : Array(a)) : Array(a) {\n  `\n    (() => {\n      return #{array}.sort((a, b) => {\n        let aVal = #{func}(a)\n        let bVal = #{func}(b)\n\n        if (aVal < bVal) {\n          return -1\n        }\n\n        if (aVal > bVal) {\n          return 1\n        }\n\n        return 0\n      })\n    })()\n    `\n}","arguments":[{"type":"Function(a, b)","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns a copy of a portion of an array (end not included).</p>\n<pre><code>Array.slice(2, 4, [&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]) == [&quot;camel&quot;, &quot;duck&quot;]\n</code></pre>\n","type":"Array(a)","name":"slice","source":"/*\nReturns a copy of a portion of an array (end not included).\n\n  Array.slice(2, 4, [\"ant\", \"bison\", \"camel\", \"duck\", \"elephant\"]) == [\"camel\", \"duck\"]\n*/\nfun slice (begin : Number, end : Number, array : Array(a)) : Array(a) {\n  `#{array}.slice(#{begin}, #{end})`\n}","arguments":[{"type":"Number","name":"begin"},{"type":"Number","name":"end"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns whether or not the array is empty.</p>\n<pre><code>Array.isEmpty([]) == true\nArray.isEmpty([&quot;a&quot;, &quot;b&quot;]) == false\n</code></pre>\n","type":"Bool","name":"isEmpty","source":"/*\nReturns whether or not the array is empty.\n\n  Array.isEmpty([]) == true\n  Array.isEmpty([\"a\", \"b\"]) == false\n*/\nfun isEmpty (array : Array(a)) : Bool {\n  size(array) == 0\n}","arguments":[{"type":"Array(a)","name":"array"}]},{"description":"<p>Inserts the given element between the elements of the given array.</p>\n<pre><code>Array.intersperse(&quot;a&quot;, [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;]) == [&quot;x&quot;, &quot;a&quot;, &quot;y&quot;, &quot;a&quot;, &quot;z&quot;]\n</code></pre>\n","type":"Array(a)","name":"intersperse","source":"/*\nInserts the given element between the elements of the given array.\n\n  Array.intersperse(\"a\", [\"x\", \"y\", \"z\"]) == [\"x\", \"a\", \"y\", \"a\", \"z\"]\n*/\nfun intersperse (item : a, array : Array(a)) : Array(a) {\n  `#{array}.reduce((a,v)=>[...a,v,#{item}],[]).slice(0,-1)`\n}","arguments":[{"type":"a","name":"item"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Checks whether or not the given element exists in the array.</p>\n<pre><code>Array.contains(&quot;a&quot;, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) == true\nArray.contains(&quot;a&quot;, [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;]) == false\n</code></pre>\n","type":"Bool","name":"contains","source":"/*\nChecks whether or not the given element exists in the array.\n\n  Array.contains(\"a\", [\"a\", \"b\", \"c\"]) == true\n  Array.contains(\"a\", [\"x\", \"y\", \"z\"]) == false\n*/\nfun contains (other : a, array : Array(a)) : Bool {\n  `\n    (() => {\n      for (let item of #{array}) {\n        if (_compare(#{other}, item)) {\n          return true\n        }\n      }\n\n      return false\n    })()\n    `\n}","arguments":[{"type":"a","name":"other"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Creates an array of numbers starting from the first agrument and\nending in the last.</p>\n<pre><code>Array.range(0, 5) == [0, 1, 2, 3, 4, 5]\n</code></pre>\n","type":"Array(Number)","name":"range","source":"/*\nCreates an array of numbers starting from the first agrument and\nending in the last.\n\n  Array.range(0, 5) == [0, 1, 2, 3, 4, 5]\n*/\nfun range (from : Number, to : Number) : Array(Number) {\n  `Array.from({ length: (#{to} + 1) - #{from} }).map((v, i) => i + #{from})`\n}","arguments":[{"type":"Number","name":"from"},{"type":"Number","name":"to"}]},{"description":"<p>Deletes every occurence of the given element from the array.</p>\n<pre><code>Array.delete(&quot;a&quot;, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) == [&quot;b&quot;, &quot;c&quot;]\n</code></pre>\n","type":"Array(a)","name":"delete","source":"/*\nDeletes every occurence of the given element from the array.\n\n  Array.delete(\"a\", [\"a\", \"b\", \"c\"]) == [\"b\", \"c\"]\n*/\nfun delete (what : a, array : Array(a)) : Array(a) {\n  reject((item : a) : Bool { item == what }, array)\n}","arguments":[{"type":"a","name":"what"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns the maximum value of an array of numbers.</p>\n<pre><code>Array.max([0, 1, 2, 3, 4]) == 4\nArray.max([]) == 0\n</code></pre>\n","type":"Number","name":"max","source":"/*\nReturns the maximum value of an array of numbers.\n\n  Array.max([0, 1, 2, 3, 4]) == 4\n  Array.max([]) == 0\n*/\nfun max (array : Array(Number)) : Number {\n  `Math.max(...#{array})`\n}","arguments":[{"type":"Array(Number)","name":"array"}]},{"description":"<p>Returns an random element from the array.</p>\n<pre><code>Array.sample([&quot;a&quot;]) == Maybe.just(&quot;a&quot;)\nArray.sample() == Maybe.nothing()\n</code></pre>\n","type":"Maybe(a)","name":"sample","source":"/*\nReturns an random element from the array.\n\n  Array.sample([\"a\"]) == Maybe.just(\"a\")\n  Array.sample() == Maybe.nothing()\n*/\nfun sample (array : Array(a)) : Maybe(a) {\n  `\n    (() => {\n      if (#{array}.length) {\n        const item = #{array}[Math.floor(Math.random() * #{array}.length)]\n\n        return #{Maybe::Just(`item`)}\n      } else {\n        return #{Maybe::Nothing}\n      }\n    })()\n    `\n}","arguments":[{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns the element at the given index.</p>\n<pre><code>Array.at(0, [0]) == Maybe.just(0)\nArray.at(1, [0]) == Maybe.nothing()\n</code></pre>\n","type":"Maybe(a)","name":"at","source":"/*\nReturns the element at the given index.\n\n  Array.at(0, [0]) == Maybe.just(0)\n  Array.at(1, [0]) == Maybe.nothing()\n*/\nfun at (index : Number, array : Array(a)) : Maybe(a) {\n  `_at(#{array}, #{index})`\n}","arguments":[{"type":"Number","name":"index"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Put two lists together:</p>\n<pre><code>Array.append([1,1,2] [3,5,8]) == [1,1,2,3,5,8]\n</code></pre>\n","type":"Array(a)","name":"append","source":"/*\nPut two lists together:\n\n  Array.append([1,1,2] [3,5,8]) == [1,1,2,3,5,8]\n*/\nfun append (array1 : Array(a), array2 : Array(a)) : Array(a) {\n  `[].concat(#{array1}).concat(#{array2})`\n}","arguments":[{"type":"Array(a)","name":"array1"},{"type":"Array(a)","name":"array2"}]},{"description":"<p>Concatenate a bunch of arrays into a single array:</p>\n<pre><code>Array.concat([[1,2],[3],[4,5]]) == [1,2,3,4,5]\n</code></pre>\n","type":"Array(a)","name":"concat","source":"/*\nConcatenate a bunch of arrays into a single array:\n\n  Array.concat([[1,2],[3],[4,5]]) == [1,2,3,4,5]\n*/\nfun concat (arrays : Array(Array(a))) : Array(a) {\n  reduce([], append, arrays)\n}","arguments":[{"type":"Array(Array(a))","name":"arrays"}]},{"description":"<p>Applies the given function against an accumulator and each element in the\narray (from left to right) to reduce it to a single value.</p>\n<pre><code>Array.reduce(\n  0,\n  (memo : Number, item : Number) : Number { memo + item },\n  [1, 2, 3]) == 6\n</code></pre>\n","type":"b","name":"reduce","source":"/*\nApplies the given function against an accumulator and each element in the\narray (from left to right) to reduce it to a single value.\n\n  Array.reduce(\n    0,\n    (memo : Number, item : Number) : Number { memo + item },\n    [1, 2, 3]) == 6\n*/\nfun reduce (\n  initial : b,\n  method : Function(b, a, b),\n  array : Array(a)\n) : b {\n  `#{array}.reduce(#{method}, #{initial})`\n}","arguments":[{"type":"b","name":"initial"},{"type":"Function(b, a, b)","name":"method"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Reduce a list from the right.</p>\n<pre><code>[1,2,3,4,5]\n|&gt; Array.reduceRight(0, (acc : Number, n : Number) : Number { acc + n}) == 15\n</code></pre>\n","type":"b","name":"reduceRight","source":"/*\nReduce a list from the right.\n\n  [1,2,3,4,5]\n  |> Array.reduceRight(0, (acc : Number, n : Number) : Number { acc + n}) == 15\n*/\nfun reduceRight (\n  initial : b,\n  func : Function(b, a, b),\n  array : Array(a)\n) : b {\n  `#{array}.reduceRight(#{func}, #{initial})`\n}","arguments":[{"type":"b","name":"initial"},{"type":"Function(b, a, b)","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Map over a nested array and then flatten.</p>\n<pre><code>[[1,2],[1,5]]\n|&gt; Array.flatMap((a : Array(Number) : Array(Number) {\n  [Array.max(n)]\n}) == [2,5]\n</code></pre>\n","type":"Array(b)","name":"flatMap","source":"/*\nMap over a nested array and then flatten.\n\n  [[1,2],[1,5]]\n  |> Array.flatMap((a : Array(Number) : Array(Number) {\n    [Array.max(n)]\n  }) == [2,5]\n*/\nfun flatMap (func : Function(a, Array(b)), array : Array(a)) : Array(b) {\n  concat(map(func, array))\n}","arguments":[{"type":"Function(a, Array(b))","name":"func"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Take n number of items from the left.</p>\n<pre><code>Array.take(2, [1,2,3,4]) == [1,2]\n</code></pre>\n","type":"Array(a)","name":"take","source":"/*\nTake n number of items from the left.\n\n  Array.take(2, [1,2,3,4]) == [1,2]\n*/\nfun take (number : Number, array : Array(a)) : Array(a) {\n  `#{array}.slice(0, #{number})`\n}","arguments":[{"type":"Number","name":"number"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Drop n number of items from the left.</p>\n<pre><code>Array.drop(2, [1,2,3,4]) == [3,4]\n</code></pre>\n","type":"Array(a)","name":"drop","source":"/*\nDrop n number of items from the left.\n\n  Array.drop(2, [1,2,3,4]) == [3,4]\n*/\nfun drop (number : Number, array : Array(a)) : Array(a) {\n  `#{array}.slice(#{number})`\n}","arguments":[{"type":"Number","name":"number"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Drop n number of items from the right.</p>\n<pre><code>Array.drop(2, [1,2,3,4]) == [1,2]\n</code></pre>\n","type":"Array(a)","name":"dropRight","source":"/*\nDrop n number of items from the right.\n\n  Array.drop(2, [1,2,3,4]) == [1,2]\n*/\nfun dropRight (number : Number, array : Array(a)) : Array(a) {\n  `\n    (() => {\n      if (#{number} < 0) { return #{array} }\n      return #{array}.slice(0, -#{number})\n    })()\n    `\n}","arguments":[{"type":"Number","name":"number"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Group an array into sub groups of specified length (all items are included so\nthe last group maybe shorter if after grouping there is a remainder)</p>\n<pre><code>Array.groupsOf(2, [1,2,3,4,5,6,7]) == [[1,2],[3,4],[5,6],[7]]\n</code></pre>\n","type":"Array(Array(a))","name":"groupsOf","source":"/*\nGroup an array into sub groups of specified length (all items are included so\nthe last group maybe shorter if after grouping there is a remainder)\n\n  Array.groupsOf(2, [1,2,3,4,5,6,7]) == [[1,2],[3,4],[5,6],[7]]\n*/\nfun groupsOf (size : Number, array : Array(a)) : Array(Array(a)) {\n  `\n    (() => {\n      let groups = Math.ceil(#{array}.length/#{size})\n      let lowerLimit = 0\n      let result = []\n\n      for (var i= 0; i < groups; i++) {\n        lowerLimit = i*#{size};\n        result.push(#{array}.slice(lowerLimit, lowerLimit + #{size}))\n      }\n\n      return result;\n    })()\n    `\n}","arguments":[{"type":"Number","name":"size"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Group an array into sub groups of specified length (all items are included so\nthe last group maybe shorter if after grouping there is a remainder) starting\nfrom the end of the array.\n7\nArray.groupsOfFromEnd(2, [1,2,3,4,5,6,7]) == [[1],[2,3],[4,5],[6,7]]</p>\n","type":"Array(Array(a))","name":"groupsOfFromEnd","source":"/*\n  Group an array into sub groups of specified length (all items are included so\n  the last group maybe shorter if after grouping there is a remainder) starting\n  from the end of the array.\n7\n    Array.groupsOfFromEnd(2, [1,2,3,4,5,6,7]) == [[1],[2,3],[4,5],[6,7]]\n*/\nfun groupsOfFromEnd (size : Number, array : Array(a)) : Array(Array(a)) {\n  `\n    (() => {\n      let groups = Math.ceil(#{array}.length / #{size})\n      let lowerLimit = 0\n      let result = []\n\n      #{array} =\n        Array.from(#{array}).reverse()\n\n      for (var i= 0; i < groups; i++) {\n        lowerLimit = i* #{size};\n        result.unshift(#{array}.slice(lowerLimit, lowerLimit +  #{size}).reverse())\n      }\n\n      return result;\n    })()\n    `\n}","arguments":[{"type":"Number","name":"size"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Pushes a new item at the head of the array.</p>\n<pre><code>Array.unshift(2, [3,4]) == [2,3,4]\n</code></pre>\n","type":"Array(a)","name":"unshift","source":"/*\nPushes a new item at the head of the array.\n\n  Array.unshift(2, [3,4]) == [2,3,4]\n*/\nfun unshift (item : a, array : Array(a)) : Array(a) {\n  `\n    (() => {\n      const result = Array.from(#{array})\n      result.unshift(#{item})\n      return result\n    })()\n    `\n}","arguments":[{"type":"a","name":"item"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Flattens an <code>Array(Maybe(a))</code> into an <code>Array(a)</code>, by unwrapping the items\nand skipping nothings.</p>\n<pre><code>Array.compact([Maybe.just(&quot;A&quot;), Maybe.nothing()]) == [&quot;A&quot;]\n</code></pre>\n","type":"Array(a)","name":"compact","source":"/*\nFlattens an `Array(Maybe(a))` into an `Array(a)`, by unwrapping the items\nand skipping nothings.\n\n  Array.compact([Maybe.just(\"A\"), Maybe.nothing()]) == [\"A\"]\n*/\nfun compact (array : Array(Maybe(a))) : Array(a) {\n  Array.reduce(\n    [], \n    (memo : Array(a), item : Maybe(a)) : Array(a) {\n      case (item) {\n        Maybe::Just value => Array.push(value, memo)\n        Maybe::Nothing => memo\n      }\n    }, \n    array)\n}","arguments":[{"type":"Array(Maybe(a))","name":"array"}]},{"description":"<p>Moves an item at the given index (<code>from</code>) to a new index (<code>to</code>).</p>\n<p>The array is returned as is if:</p>\n<ul>\n<li>\n<p><code>from</code> and <code>to</code> are the same.</p>\n</li>\n<li>\n<p>a negative number is supplied to <code>from</code></p>\n</li>\n<li>\n<p>a number is supplied to <code>from</code> which is grater the the length of the array</p>\n<p>Array.move(-1, 1, [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]) == [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]\nArray.move(10, 1, [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]) == [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]\nArray.move(0, 0, [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]) == [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</p>\n</li>\n</ul>\n<p>If a negative number is supplied to <code>to</code> then, the item is moved to the\nfirst position.</p>\n<pre><code>Array.move(2, -1, [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]) == [&quot;C&quot;, &quot;A&quot;, &quot;B&quot;]\n</code></pre>\n<p>If a number is supplied to <code>to</code> which is grater the the length of the array,\nthen the item is moved to the last position.</p>\n<pre><code>Array.move(0, 10, [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]) == [&quot;B&quot;, &quot;C&quot;, &quot;A&quot;]\n</code></pre>\n","type":"Array(a)","name":"move","source":"/*\nMoves an item at the given index (`from`) to a new index (`to`).\n\nThe array is returned as is if:\n* `from` and `to` are the same.\n* a negative number is supplied to `from`\n* a number is supplied to `from` which is grater the the length of the array\n\n  Array.move(-1, 1, [\"A\", \"B\", \"C\"]) == [\"A\", \"B\", \"C\"]\n  Array.move(10, 1, [\"A\", \"B\", \"C\"]) == [\"A\", \"B\", \"C\"]\n  Array.move(0, 0, [\"A\", \"B\", \"C\"]) == [\"A\", \"B\", \"C\"]\n\nIf a negative number is supplied to `to` then, the item is moved to the\nfirst position.\n\n  Array.move(2, -1, [\"A\", \"B\", \"C\"]) == [\"C\", \"A\", \"B\"]\n\nIf a number is supplied to `to` which is grater the the length of the array,\nthen the item is moved to the last position.\n\n  Array.move(0, 10, [\"A\", \"B\", \"C\"]) == [\"B\", \"C\", \"A\"]\n*/\nfun move (from : Number, to : Number, array : Array(a)) : Array(a) {\n  `\n    (() => {\n      const result = Array.from(#{array})\n\n      if (#{from} == #{to} || #{from} < 0 || #{from} >= result.length) {\n        return result\n      } else if (#{to} < 0) {\n        /* If the desired position is lower then zero put at the front. */\n        result.unshift(result.splice(#{from}, 1)[0])\n      } else if (#{to} >= result.length) {\n        /* If the desired position is bigger then length put at the back. */\n        result.push(result.splice(#{from}, 1)[0])\n      } else {\n        /* Else we just move. */\n        result.splice(#{to}, 0, result.splice(#{from}, 1)[0])\n      }\n\n      return result\n    })()\n    `\n}","arguments":[{"type":"Number","name":"from"},{"type":"Number","name":"to"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Inserts the given item into the given position of the given array.</p>\n<pre><code>Array.insertAt(&quot;a&quot;, 0, [&quot;b&quot;,&quot;c&quot;]) == [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</code></pre>\n","type":"Array(a)","name":"insertAt","source":"/*\nInserts the given item into the given position of the given array.\n\n  Array.insertAt(\"a\", 0, [\"b\",\"c\"]) == [\"a\",\"b\",\"c\"]\n*/\nfun insertAt (item : a, position : Number, array : Array(a)) : Array(a) {\n  `\n    (() => {\n      const result = Array.from(#{array})\n\n      if (#{position} <= 0) {\n        result.unshift(#{item})\n      } else {\n        result.splice(#{position}, 0, #{item})\n      }\n\n      return result\n    })()\n    `\n}","arguments":[{"type":"a","name":"item"},{"type":"Number","name":"position"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Spaws the items at the given indexes of the given array. It returns the array\nunchanged if there is no item at any of the given indexs.</p>\n<pre><code>Array.swap(0, 1, [&quot;a&quot;,&quot;b&quot;]) == [&quot;b&quot;, &quot;a&quot;]\n</code></pre>\n","type":"Array(a)","name":"swap","source":"/*\nSpaws the items at the given indexes of the given array. It returns the array\nunchanged if there is no item at any of the given indexs.\n\n  Array.swap(0, 1, [\"a\",\"b\"]) == [\"b\", \"a\"]\n*/\nfun swap (index1 : Number, index2 : Number, array : Array(a)) : Array(a) {\n  `\n    (() => {\n      if (#{index1} < 0 ||\n          #{index2} < 0 ||\n          #{index1} >= #{array}.length ||\n          #{index2} >= #{array}.length) {\n        return #{array}\n      }\n\n      const result = Array.from(#{array})\n      const saved = result[#{index1}]\n      result[#{index1}] = result[#{index2}]\n      result[#{index2}] = saved;\n      return result\n    })()\n    `\n}","arguments":[{"type":"Number","name":"index1"},{"type":"Number","name":"index2"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Deletes the item of an array with the given index.</p>\n","type":"Array(a)","name":"deleteAt","source":"/* Deletes the item of an array with the given index. */\nfun deleteAt (index : Number, array : Array(a)) : Array(a) {\n  `\n    (() => {\n      if (#{index} < 0 || #{index} >= #{array}.length) { return #{array} }\n      const result = Array.from(#{array})\n      result.splice(#{index}, 1)\n      return result\n    })()\n    `\n}","arguments":[{"type":"Number","name":"index"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Updates the item at the given index of the given array using the given\nfunction.</p>\n<pre><code>Array.updateAt(\n  2, (number : Number) : Number {\n    number + 2\n  }, [0,1,2]) == [0,1,4]\n</code></pre>\n","type":"Array(a)","name":"updateAt","source":"/*\nUpdates the item at the given index of the given array using the given\nfunction.\n\n  Array.updateAt(\n    2, (number : Number) : Number {\n      number + 2\n    }, [0,1,2]) == [0,1,4]\n*/\nfun updateAt (\n  index : Number,\n  method : Function(a, a),\n  array : Array(a)\n) : Array(a) {\n  `\n    (() => {\n      if (#{array}[#{index}]) {\n        return #{setAt(index, method(`#{array}[#{index}]`), array)}\n      } else {\n        return #{array}\n      }\n    })()\n    `\n}","arguments":[{"type":"Number","name":"index"},{"type":"Function(a, a)","name":"method"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Sets the item at the given index to the given item of the given array.</p>\n<pre><code>Array.setAt(2, 5, [1,2,3]) == [1,2,5]\n</code></pre>\n","type":"Array(a)","name":"setAt","source":"/*\nSets the item at the given index to the given item of the given array.\n\n  Array.setAt(2, 5, [1,2,3]) == [1,2,5]\n*/\nfun setAt (index : Number, item : a, array : Array(a)) : Array(a) {\n  `\n    (() => {\n      if (#{index} < 0 || #{index} >= #{array}.length) { return #{array} }\n      const result = Array.from(#{array})\n      result[#{index}] = #{item}\n      return result\n    })()\n    `\n}","arguments":[{"type":"Number","name":"index"},{"type":"a","name":"item"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns the index of the given item in the given array.</p>\n<pre><code>Arrray.indexOf(&quot;a&quot;, [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]) == 1\n</code></pre>\n","type":"Number","name":"indexOf","source":"/*\nReturns the index of the given item in the given array.\n\n  Arrray.indexOf(\"a\", [\"a\",\"b\",\"c\"]) == 1\n*/\nfun indexOf (item : a, array : Array(a)) : Number {\n  `\n    (() => {\n      for (let index = 0; index < #{array}.length; index++) {\n        if (_compare(#{item}, #{array}[index])) {\n          return index\n        }\n      }\n\n      return -1\n    })()\n    `\n}","arguments":[{"type":"a","name":"item"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns the index of the item in the given array which matches the given value\nusing the given function the generate the compared value.</p>\n<pre><code>Array.indexBy(&quot;a&quot;, (item : String) : String { item }, [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]) == 0\n</code></pre>\n","type":"Number","name":"indexBy","source":"/*\nReturns the index of the item in the given array which matches the given value\nusing the given function the generate the compared value.\n\n  Array.indexBy(\"a\", (item : String) : String { item }, [\"a\",\"b\",\"c\"]) == 0\n*/\nfun indexBy (value : b, method : Function(a, b), array : Array(a)) : Number {\n  `\n    (() => {\n      for (let index = 0; index < #{array}.length; index++) {\n        if (_compare(#{value}, #{method}(#{array}[index]))) {\n          return index\n        }\n      }\n\n      return -1\n    })()\n    `\n}","arguments":[{"type":"b","name":"value"},{"type":"Function(a, b)","name":"method"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Sums up the given array using the given function.</p>\n<pre><code>Array.sumBy((value : Number) : Number { value }, [1, 2, 3]) == 6\n</code></pre>\n","type":"Number","name":"sumBy","source":"/*\nSums up the given array using the given function.\n\n   Array.sumBy((value : Number) : Number { value }, [1, 2, 3]) == 6\n*/\nfun sumBy (method : Function(a, Number), array : Array(a)) : Number {\n  array\n  |> Array.map(method)\n  |> Array.sum()\n}","arguments":[{"type":"Function(a, Number)","name":"method"},{"type":"Array(a)","name":"array"}]},{"description":"<p>Sums up the given array of numbers.</p>\n<pre><code>Array.sum([1, 2, 3]) == 6\n</code></pre>\n","type":"Number","name":"sum","source":"/*\nSums up the given array of numbers.\n\n   Array.sum([1, 2, 3]) == 6\n*/\nfun sum (array : Array(Number)) : Number {\n  Array.reduce(\n    0, \n    (memo : Number, item : Number) : Number {\n      item + memo\n    }, \n    array)\n}","arguments":[{"type":"Array(Number)","name":"array"}]}]},{"description":"<p>Functions for handling boolean values.</p>\n","name":"Bool","functions":[{"description":"<p>Converts a boolean to a string.</p>\n<pre><code>Bool.toString(true) == &quot;true&quot;\nBool.toString(false) == &quot;false&quot;\n</code></pre>\n","type":"String","name":"toString","source":"/*\nConverts a boolean to a string.\n\n  Bool.toString(true) == \"true\"\n  Bool.toString(false) == \"false\"\n*/\nfun toString (item : Bool) : String {\n  `#{item}.toString()`\n}","arguments":[{"type":"Bool","name":"item"}]}]},{"description":"<p>Functions for debugging purpuses</p>\n","name":"Debug","functions":[{"description":"<p>Logs an arbritaty value to the windows console.</p>\n","type":"a","name":"log","source":"/* Logs an arbritaty value to the windows console. */\nfun log (value : a) : a {\n  `\n    (() => {\n      if (window.DEBUG) {\n        window.DEBUG.log(#{value})\n      } else {\n        console.log(#{value})\n      }\n\n      return #{value}\n    })()\n    `\n}","arguments":[{"type":"a","name":"value"}]}]},{"description":"<p>Functions for working with the DOM.</p>\n","name":"Dom","functions":[{"description":"<p>Creates a new <code>Dom.Element</code> with the given tag.</p>\n","type":"Dom.Element","name":"createElement","source":"/* Creates a new `Dom.Element` with the given tag. */\nfun createElement (tag : String) : Dom.Element {\n  `document.createElement(#{tag})`\n}","arguments":[{"type":"String","name":"tag"}]},{"description":"<p>Gets the element with the given id from anywhere in the page.</p>\n<pre><code>Dom.getElementById(&quot;my-div&quot;)\n</code></pre>\n","type":"Maybe(Dom.Element)","name":"getElementById","source":"/*\nGets the element with the given id from anywhere in the page.\n\n  Dom.getElementById(\"my-div\")\n*/\nfun getElementById (id : String) : Maybe(Dom.Element) {\n  `\n    (() => {\n      let element = document.getElementById(#{id})\n\n      if (element) {\n        return #{Maybe::Just(`element`)}\n      } else {\n        return #{Maybe::Nothing}\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"id"}]},{"description":"<p>Gets the element with the given id from anywhere in the page.</p>\n<pre><code>Dom.getElementById(&quot;body section &gt; p:first-child&quot;)\n</code></pre>\n","type":"Maybe(Dom.Element)","name":"getElementBySelector","source":"/*\nGets the element with the given id from anywhere in the page.\n\n  Dom.getElementById(\"body section > p:first-child\")\n*/\nfun getElementBySelector (selector : String) : Maybe(Dom.Element) {\n  `\n    (() => {\n      try {\n        let element = document.querySelector(#{selector})\n\n        if (element) {\n          return #{Maybe::Just(`element`)}\n        } else {\n          return #{Maybe::Nothing}\n        }\n      } catch (error) {\n        return #{Maybe::Nothing}\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"selector"}]},{"description":"<p>Returns the dimensions (BoundingClientRect) of a <code>Dom.Element</code></p>\n<pre><code>Dom.getDimensions(Dom.createElement(&quot;div&quot;)) = {\n  bottom = 0,\n  height = 0,\n  width = 0,\n  right = 0,\n  left = 0,\n  top = 0,\n  x = 0,\n  y = 0\n}\n</code></pre>\n","type":"Dom.Dimensions","name":"getDimensions","source":"/*\nReturns the dimensions (BoundingClientRect) of a `Dom.Element`\n\n  Dom.getDimensions(Dom.createElement(\"div\")) = {\n    bottom = 0,\n    height = 0,\n    width = 0,\n    right = 0,\n    left = 0,\n    top = 0,\n    x = 0,\n    y = 0\n  }\n*/\nfun getDimensions (dom : Dom.Element) : Dom.Dimensions {\n  `\n    (() => {\n      const rect = #{dom}.getBoundingClientRect()\n\n      return #{{\n  bottom = `rect.bottom`,\n  height = `rect.height`,\n  width = `rect.width`,\n  right = `rect.right`,\n  left = `rect.left`,\n  top = `rect.top`,\n  x = `rect.x`,\n  y = `rect.y`\n}}\n    })()\n    `\n}","arguments":[{"type":"Dom.Element","name":"dom"}]},{"description":"<p>Gets the value as string form a <code>Dom.Element</code>.</p>\n<p>If the element supports value it will return it, otherwise it returns an\nempty string.</p>\n<pre><code>Dom.getValue(&quot;input[value=hello]&quot;) == &quot;hello&quot;\nDom.getValue(&quot;div&quot;) == &quot;&quot;\n</code></pre>\n","type":"String","name":"getValue","source":"/*\nGets the value as string form a `Dom.Element`.\n\nIf the element supports value it will return it, otherwise it returns an\nempty string.\n\n  Dom.getValue(\"input[value=hello]\") == \"hello\"\n  Dom.getValue(\"div\") == \"\"\n*/\nfun getValue (dom : Dom.Element) : String {\n  `\n    (() => {\n      let value = #{dom}.value\n\n      if (typeof value === \"string\") {\n        return value\n      } else {\n        return \"\"\n      }\n    })()\n    `\n}","arguments":[{"type":"Dom.Element","name":"dom"}]},{"description":"<p>Sets the value property of a <code>Dom.Element</code>.</p>\n<p>It is used to set the value of <code>input</code> fields programatically.</p>\n","type":"Dom.Element","name":"setValue","source":"/*\nSets the value property of a `Dom.Element`.\n\nIt is used to set the value of `input` fields programatically.\n*/\nfun setValue (value : String, dom : Dom.Element) : Dom.Element {\n  `(#{dom}.value = #{value}) && #{dom}`\n}","arguments":[{"type":"String","name":"value"},{"type":"Dom.Element","name":"dom"}]},{"description":"<p>Returns whether or not the given <code>Dom.Element</code> matches the given selector.</p>\n<pre><code>Dom.matches(&quot;div&quot;, Dom.createElement(&quot;div&quot;)) == true\nDom.matches(&quot;p&quot;, Dom.createElement(&quot;div&quot;)) == false\n</code></pre>\n","type":"Bool","name":"matches","source":"/*\nReturns whether or not the given `Dom.Element` matches the given selector.\n\n  Dom.matches(\"div\", Dom.createElement(\"div\")) == true\n  Dom.matches(\"p\", Dom.createElement(\"div\")) == false\n*/\nfun matches (selector : String, dom : Dom.Element) : Bool {\n  `\n    (() => {\n      try {\n        return #{dom}.matches(#{selector})\n      } catch (error) {\n        return false\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"Dom.Element","name":"dom"}]},{"description":"<p>Tries to focus the given element in the next 150 milliseconds and warn\nin the console if not successful.</p>\n","type":"Promise(Never, Void)","name":"focusWhenVisible","source":"/*\nTries to focus the given element in the next 150 milliseconds and warn\nin the console if not successful.\n*/\nfun focusWhenVisible (element : Dom.Element) : Promise(Never, Void) {\n  `\n    (() => {\n      let counter = 0\n\n      let focus = () => {\n        if (counter > 15) {\n          console.warn('Could not focus the element in 150ms. Is it visible?', #{element})\n          return\n        }\n\n        #{element}.focus()\n\n        if (document.activeElement != #{element}) {\n          counter++\n          setTimeout(focus, 10)\n        }\n      }\n\n      focus()\n    })()\n    `\n}","arguments":[{"type":"Dom.Element","name":"element"}]},{"description":"<p>Returns if the given base element contains the given element.</p>\n","type":"Bool","name":"contains","source":"/* Returns if the given base element contains the given element. */\nfun contains (element : Dom.Element, base : Dom.Element) : Bool {\n  `#{base}.contains(#{element})`\n}","arguments":[{"type":"Dom.Element","name":"element"},{"type":"Dom.Element","name":"base"}]}]},{"description":"<p>Methods to work with dimensions in the DOM</p>\n","name":"Dom.Dimensions","functions":[{"description":"<p>Returns an empty Dom.Dimensions record.</p>\n","type":"Dom.Dimensions","name":"empty","source":"/* Returns an empty Dom.Dimensions record. */\nfun empty : Dom.Dimensions {\n  {\n    bottom = 0,\n    height = 0,\n    width = 0,\n    right = 0,\n    left = 0,\n    top = 0,\n    x = 0,\n    y = 0\n  }\n}","arguments":[]}]},{"description":"<p>Functions for getting, creating and reading files in different formats.</p>\n","name":"File","functions":[{"description":"<p>Creates a new file from the contents, name and mime-type.</p>\n<pre><code>File.fromString(&quot;Some contents...&quot;, &quot;test.txt&quot;, &quot;text/plain&quot;)\n</code></pre>\n","type":"File","name":"fromString","source":"/*\nCreates a new file from the contents, name and mime-type.\n\n  File.fromString(\"Some contents...\", \"test.txt\", \"text/plain\")\n*/\nfun fromString (contents : String, name : String, type : String) : File {\n  `new File([#{contents}], #{name}, { type: #{type} })`\n}","arguments":[{"type":"String","name":"contents"},{"type":"String","name":"name"},{"type":"String","name":"type"}]},{"description":"<p>Returns the name of the file.</p>\n<pre><code>(File.fromString(&quot;Some contents...&quot;, &quot;test.txt&quot;, &quot;text/plain&quot;)\n|&gt; File.name()) == &quot;test.txt&quot;\n</code></pre>\n","type":"String","name":"name","source":"/*\nReturns the name of the file.\n\n  (File.fromString(\"Some contents...\", \"test.txt\", \"text/plain\")\n  |> File.name()) == \"test.txt\"\n*/\nfun name (file : File) : String {\n  `#{file}.name`\n}","arguments":[{"type":"File","name":"file"}]},{"description":"<p>Returns the size of the file in bytes.</p>\n<pre><code>(File.fromString(&quot;Some contents...&quot;, &quot;test.txt&quot;, &quot;text/plain&quot;)\n|&gt; File.size()) == 16\n</code></pre>\n","type":"Number","name":"size","source":"/*\nReturns the size of the file in bytes.\n\n  (File.fromString(\"Some contents...\", \"test.txt\", \"text/plain\")\n  |> File.size()) == 16\n*/\nfun size (file : File) : Number {\n  `#{file}.size`\n}","arguments":[{"type":"File","name":"file"}]},{"description":"<p>Returns the mime type of the file.</p>\n<pre><code>(File.fromString(&quot;Some contents...&quot;, &quot;test.txt&quot;, &quot;text/plain&quot;)\n|&gt; File.mimeType()) == &quot;text/plain&quot;\n</code></pre>\n","type":"String","name":"mimeType","source":"/*\nReturns the mime type of the file.\n\n  (File.fromString(\"Some contents...\", \"test.txt\", \"text/plain\")\n  |> File.mimeType()) == \"text/plain\"\n*/\nfun mimeType (file : File) : String {\n  `#{file}.type`\n}","arguments":[{"type":"File","name":"file"}]},{"description":"<p>Opens the browsers file dialog for selecting multiple files.</p>\n<ul>\n<li>\n<p>The mime type can be restricted to the given one.</p>\n</li>\n<li>\n<p>It might not resolve if the user cancels the dialog.</p>\n<p>sequence {\nfiles =\nFile.selectMultiple(&quot;application/json&quot;)</p>\n<p>Debug.log(files)\n}</p>\n</li>\n</ul>\n","type":"Promise(Never, Array(File))","name":"selectMultiple","source":"/*\nOpens the browsers file dialog for selecting multiple files.\n\n* The mime type can be restricted to the given one.\n* It might not resolve if the user cancels the dialog.\n\n  sequence {\n    files =\n      File.selectMultiple(\"application/json\")\n\n    Debug.log(files)\n  }\n*/\nfun selectMultiple (accept : String) : Promise(Never, Array(File)) {\n  `\n    (() => {\n      let input = document.createElement('input')\n\n      input.style.position = 'absolute'\n      input.style.height = '1px'\n      input.style.width = '1px'\n      input.style.left = '-1px'\n      input.style.top = '-1px'\n\n      input.accept = #{accept}\n      input.multiple = true\n      input.type = 'file'\n\n      document.body.appendChild(input)\n\n      return new Promise((resolve, reject) => {\n        input.addEventListener('change', () => {\n          resolve(Array.from(input.files))\n        })\n        input.click()\n        document.body.removeChild(input)\n      })\n    })()\n    `\n}","arguments":[{"type":"String","name":"accept"}]},{"description":"<p>Opens the browsers file dialog for selecting a single file.</p>\n<ul>\n<li>\n<p>The mime type can be restricted to the given one.</p>\n</li>\n<li>\n<p>It might not esolve if the user cancels the dialog.</p>\n<p>sequence {\nfile =\nFile.select(&quot;application/json&quot;)</p>\n<p>Debug.log(file)\n}</p>\n</li>\n</ul>\n","type":"Promise(Never, File)","name":"select","source":"/*\nOpens the browsers file dialog for selecting a single file.\n\n* The mime type can be restricted to the given one.\n* It might not esolve if the user cancels the dialog.\n\n  sequence {\n    file =\n      File.select(\"application/json\")\n\n    Debug.log(file)\n  }\n*/\nfun select (accept : String) : Promise(Never, File) {\n  `\n    (() => {\n      let input = document.createElement('input')\n\n      input.style.position = 'absolute'\n      input.style.height = '1px'\n      input.style.width = '1px'\n      input.style.left = '-1px'\n      input.style.top = '-1px'\n\n      input.accept = #{accept}\n      input.type = 'file'\n\n      document.body.appendChild(input)\n\n      return new Promise((resolve, reject) => {\n        input.addEventListener('change', () => {\n          resolve(input.files[0])\n        })\n        input.click()\n        document.body.removeChild(input)\n      })\n    })()\n    `\n}","arguments":[{"type":"String","name":"accept"}]},{"description":"<p>Reads the contents of the given file as a Data URL.</p>\n<pre><code>sequence {\n  file =\n    File.fromString(&quot;Some content...&quot;, &quot;test.txt&quot;, &quot;text/plain&quot;)\n\n  url =\n    File.readAsDataURL(file)\n\n  url == &quot;data:text/plain;....&quot;\n}\n</code></pre>\n","type":"Promise(Never, String)","name":"readAsDataURL","source":"/*\nReads the contents of the given file as a Data URL.\n\n  sequence {\n    file =\n      File.fromString(\"Some content...\", \"test.txt\", \"text/plain\")\n\n    url =\n      File.readAsDataURL(file)\n\n    url == \"data:text/plain;....\"\n  }\n*/\nfun readAsDataURL (file : File) : Promise(Never, String) {\n  `\n    (() => {\n      let reader = new FileReader();\n      return new Promise((resolve, reject) => {\n        reader.addEventListener('load', (event) => {\n          resolve(reader.result)\n        })\n        reader.readAsDataURL(#{file})\n      })\n    })()\n    `\n}","arguments":[{"type":"File","name":"file"}]},{"description":"<p>Reads the contents of the given file as a String.</p>\n<pre><code>sequence {\n  file =\n    File.create(&quot;Some content...&quot;, &quot;test.txt&quot;, &quot;text/plain&quot;)\n\n  url =\n    File.readAsString(file)\n\n  url == &quot;Some content...&quot;\n}\n</code></pre>\n","type":"Promise(Never, String)","name":"readAsString","source":"/*\nReads the contents of the given file as a String.\n\n  sequence {\n    file =\n      File.create(\"Some content...\", \"test.txt\", \"text/plain\")\n\n    url =\n      File.readAsString(file)\n\n    url == \"Some content...\"\n  }\n*/\nfun readAsString (file : File) : Promise(Never, String) {\n  `\n    (() => {\n      let reader = new FileReader();\n      return new Promise((resolve, reject) => {\n        reader.addEventListener('load', (event) => {\n          resolve(reader.result)\n        })\n        reader.readAsText(#{file})\n      })\n    })()\n    `\n}","arguments":[{"type":"File","name":"file"}]}]},{"description":"<p>Module to work with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData Web API</a>.</p>\n<p>FormData is generally used when sending messages via HTTP requests.</p>\n","name":"FormData","functions":[{"description":"<p>Returns an empty FormData object.</p>\n<pre><code>FormData.empty()\n|&gt; FormData.addString(&quot;key&quot;, &quot;value&quot;)\n</code></pre>\n","type":"FormData","name":"empty","source":"/*\nReturns an empty FormData object.\n\n  FormData.empty()\n  |> FormData.addString(\"key\", \"value\")\n*/\nfun empty : FormData {\n  `new FormData`\n}","arguments":[]},{"description":"<p>Returns the keys of a FromData object.</p>\n<pre><code>FormData.empty()\n|&gt; FormData.addString(&quot;key&quot;, &quot;value&quot;)\n|&gt; FormData.keys() == [&quot;key&quot;]\n</code></pre>\n","type":"Array(String)","name":"keys","source":"/*\nReturns the keys of a FromData object.\n\n  FormData.empty()\n  |> FormData.addString(\"key\", \"value\")\n  |> FormData.keys() == [\"key\"]\n*/\nfun keys (formData : FormData) : Array(String) {\n  `Array.from(#{formData}.keys())`\n}","arguments":[{"type":"FormData","name":"formData"}]},{"description":"<p>Returns a new FormData object copying all values from the given one and\nadding the given string with the given key.</p>\n<pre><code>FormData.empty()\n|&gt; FormData.addString(&quot;key&quot;, &quot;value&quot;)\n</code></pre>\n","type":"FormData","name":"addString","source":"/*\nReturns a new FormData object copying all values from the given one and\nadding the given string with the given key.\n\n  FormData.empty()\n  |> FormData.addString(\"key\", \"value\")\n*/\nfun addString (key : String, value : String, formData : FormData) : FormData {\n  `\n     (() => {\n      var newFormData = new FormData();\n\n      // Create new FormData object\n      for(let pair of #{formData}.entries()) {\n        newFormData.append(pair[0], pair[1])\n      }\n\n      newFormData.append(#{key}, #{value})\n\n      return newFormData\n    })()\n    `\n}","arguments":[{"type":"String","name":"key"},{"type":"String","name":"value"},{"type":"FormData","name":"formData"}]},{"description":"<p>Returns a new FormData object copying all values from the given one and\nadding the given file with the given key.</p>\n<pre><code>FormData.empty()\n|&gt; FormData.addFile(\n  &quot;key&quot;, File.fromString(&quot;Contents&quot;, &quot;text.txt&quot;, &quot;text/plain&quot;))\n</code></pre>\n","type":"FormData","name":"addFile","source":"/*\nReturns a new FormData object copying all values from the given one and\nadding the given file with the given key.\n\n  FormData.empty()\n  |> FormData.addFile(\n    \"key\", File.fromString(\"Contents\", \"text.txt\", \"text/plain\"))\n*/\nfun addFile (key : String, value : File, formData : FormData) : FormData {\n  `\n     (() => {\n      var newFormData = new FormData();\n\n      // Create new FormData object\n      for(let pair of #{formData}.entries()) {\n        newFormData.append(pair[0], pair[1])\n      }\n\n      newFormData.append(#{key}, #{value})\n\n      return newFormData\n    })()\n    `\n}","arguments":[{"type":"String","name":"key"},{"type":"File","name":"value"},{"type":"FormData","name":"formData"}]}]},{"description":null,"name":"Html","functions":[{"description":"<p>Returns an empty Html node. It is useful for example if you dont to\nrender something conditionally.</p>\n<pre><code>if (Array.isEmpty(items)) {\n  Html.empty()\n} else {\n  &lt;div&gt;\n    &lt;{ items }&gt;\n  &lt;/div&gt;\n}\n</code></pre>\n","type":"Html","name":"empty","source":"/*\nReturns an empty Html node. It is useful for example if you dont to\nrender something conditionally.\n\n  if (Array.isEmpty(items)) {\n    Html.empty()\n  } else {\n    <div>\n      <{ items }>\n    </div>\n  }\n*/\nfun empty : Html {\n  `false`\n}","arguments":[]}]},{"description":"<p>Utilit functions for <code>Html.Event</code></p>\n","name":"Html.Event","functions":[{"description":null,"type":"Html.Event","name":"fromEvent","source":"fun fromEvent (event : Html.NativeEvent) : Html.Event {\n  {\n    bubbles = `#{event}.bubbles`,\n    cancelable = `#{event}.cancelable`,\n    currentTarget = `#{event}.currentTarget`,\n    defaultPrevented = `#{event}.defaultPrevented`,\n    eventPhase = `#{event}.eventPhase`,\n    isTrusted = `#{event}.isTrusted`,\n    target = `#{event}.target`,\n    timeStamp = `#{event}.timeStamp`,\n    type = `#{event}.type`,\n    data = `#{event}.data`,\n    altKey = `#{event}.altKey`,\n    charCode = `#{event}.charCode`,\n    ctrlKey = `#{event}.ctrlKey`,\n    key = `#{event}.key`,\n    keyCode = `#{event}.keyCode`,\n    locale = `#{event}.locale`,\n    location = `#{event}.location`,\n    metaKey = `#{event}.metaKey`,\n    repeat = `#{event}.repeat`,\n    shiftKey = `#{event}.shiftKey`,\n    which = `#{event}.which`,\n    button = `#{event}.button`,\n    buttons = `#{event}.buttons`,\n    clientX = `#{event}.clientX`,\n    clientY = `#{event}.clientY`,\n    pageX = `#{event}.pageX`,\n    pageY = `#{event}.pageY`,\n    screenX = `#{event}.screenX`,\n    screenY = `#{event}.screenY`,\n    detail = `#{event}.detail`,\n    deltaMode = `#{event}.deltaMode`,\n    deltaX = `#{event}.deltaX`,\n    deltaY = `#{event}.deltaY`,\n    deltaZ = `#{event}.deltaZ`,\n    animationName = `#{event}.animationName`,\n    pseudoElement = `#{event}.pseudoElement`,\n    propertyName = `#{event}.propertyName`,\n    elapsedTime = `#{event}.elapsedTime`,\n    event = event\n  }\n}","arguments":[{"type":"Html.NativeEvent","name":"event"}]},{"description":"<p>Stops the propagation of the given event.</p>\n<pre><code>try {\n  Html.Event.stopPropagation(event)\n  doSomethingElse()\n}\n</code></pre>\n","type":"Void","name":"stopPropagation","source":"/*\nStops the propagation of the given event.\n\n  try {\n    Html.Event.stopPropagation(event)\n    doSomethingElse()\n  }\n*/\nfun stopPropagation (event : Html.Event) : Void {\n  `#{event.event}.stopPropagation()`\n}","arguments":[{"type":"Html.Event","name":"event"}]},{"description":"<p>Returns whether or not the events propagation is stopped or not.</p>\n<pre><code>Html.Event.isPropagationStopped(event)\n</code></pre>\n","type":"Bool","name":"isPropagationStopped","source":"/*\nReturns whether or not the events propagation is stopped or not.\n\n  Html.Event.isPropagationStopped(event)\n*/\nfun isPropagationStopped (event : Html.Event) : Bool {\n  `#{event.event}.isPropagationStopped()`\n}","arguments":[{"type":"Html.Event","name":"event"}]},{"description":"<p>Prevents the default action of the event from happening.</p>\n<pre><code>try {\n  Html.Event.preventDefault(event)\n  doSomethingElse()\n}\n</code></pre>\n","type":"Void","name":"preventDefault","source":"/*\nPrevents the default action of the event from happening.\n\n  try {\n    Html.Event.preventDefault(event)\n    doSomethingElse()\n  }\n*/\nfun preventDefault (event : Html.Event) : Void {\n  `#{event.event}.preventDefault()`\n}","arguments":[{"type":"Html.Event","name":"event"}]}]},{"description":"<p>Module for sending HTTP requests.</p>\n<pre><code>sequence {\n  response =\n    &quot;https://httpbin.org/get&quot;\n    |&gt; Http.get()\n    |&gt; Http.send()\n\n  Debug.log(response)\n} catch Http.ErrorResponse =&gt; error {\n  Debug.log(error)\n}\n</code></pre>\n","name":"Http","functions":[{"description":"<p>Creates an empty request record. It is useful if you want to use a non\nstandard HTTP method.</p>\n<pre><code>Http.empty() ==\n  {\n    withCredentials = false,\n    method = &quot;GET&quot;,\n    body = `null`,\n    headers = [],\n    url = &quot;&quot;\n  }\n</code></pre>\n","type":"Http.Request","name":"empty","source":"/*\nCreates an empty request record. It is useful if you want to use a non\nstandard HTTP method.\n\n  Http.empty() ==\n    {\n      withCredentials = false,\n      method = \"GET\",\n      body = `null`,\n      headers = [],\n      url = \"\"\n    }\n*/\nfun empty : Http.Request {\n  {\n    withCredentials = false,\n    method = \"GET\",\n    body = `null`,\n    headers = [],\n    url = \"\"\n  }\n}","arguments":[]},{"description":"<p>Creates a request record where the method is DELETE</p>\n<pre><code>request =\n  Http.delete(&quot;https://httpbin.org/delete&quot;)\n\nrequest.method == &quot;DELETE&quot;\n</code></pre>\n","type":"Http.Request","name":"delete","source":"/*\nCreates a request record where the method is DELETE\n\n  request =\n    Http.delete(\"https://httpbin.org/delete\")\n\n  request.method == \"DELETE\"\n*/\nfun delete (urlValue : String) : Http.Request {\n  empty()\n  |> method(\"DELETE\")\n  |> url(urlValue)\n}","arguments":[{"type":"String","name":"urlValue"}]},{"description":"<p>Creates a request record where the method is GET</p>\n<pre><code>request =\n  Http.get(&quot;https://httpbin.org/get&quot;)\n\nrequest.method == &quot;GET&quot;\n</code></pre>\n","type":"Http.Request","name":"get","source":"/*\nCreates a request record where the method is GET\n\n  request =\n    Http.get(\"https://httpbin.org/get\")\n\n  request.method == \"GET\"\n*/\nfun get (urlValue : String) : Http.Request {\n  empty()\n  |> method(\"GET\")\n  |> url(urlValue)\n}","arguments":[{"type":"String","name":"urlValue"}]},{"description":"<p>Creates a request record where the method is PUT</p>\n<pre><code>request =\n  Http.put(&quot;https://httpbin.org/put&quot;)\n\nrequest.method == &quot;PUT&quot;\n</code></pre>\n","type":"Http.Request","name":"put","source":"/*\nCreates a request record where the method is PUT\n\n  request =\n    Http.put(\"https://httpbin.org/put\")\n\n  request.method == \"PUT\"\n*/\nfun put (urlValue : String) : Http.Request {\n  empty()\n  |> method(\"PUT\")\n  |> url(urlValue)\n}","arguments":[{"type":"String","name":"urlValue"}]},{"description":"<p>Creates a request record where the method is POST</p>\n<pre><code>request =\n  Http.post(&quot;https://httpbin.org/post&quot;)\n\nrequest.method == &quot;POST&quot;\n</code></pre>\n","type":"Http.Request","name":"post","source":"/*\nCreates a request record where the method is POST\n\n  request =\n    Http.post(\"https://httpbin.org/post\")\n\n  request.method == \"POST\"\n*/\nfun post (urlValue : String) : Http.Request {\n  empty()\n  |> method(\"POST\")\n  |> url(urlValue)\n}","arguments":[{"type":"String","name":"urlValue"}]},{"description":"<p>Sets the body of the request to the given string</p>\n<pre><code>&quot;https://httpbin.org/anything&quot;\n|&gt; Http.post()\n|&gt; Http.stringBody(&quot;Some string that will come back.&quot;)\n|&gt; Http.send()\n</code></pre>\n","type":"Http.Request","name":"stringBody","source":"/*\nSets the body of the request to the given string\n\n  \"https://httpbin.org/anything\"\n  |> Http.post()\n  |> Http.stringBody(\"Some string that will come back.\")\n  |> Http.send()\n*/\nfun stringBody (body : String, request : Http.Request) : Http.Request {\n  { request | body = `#{body}` }\n}","arguments":[{"type":"String","name":"body"},{"type":"Http.Request","name":"request"}]},{"description":"<p>Sets the body of the request to the given object encoded to JSON</p>\n<pre><code>&quot;https://httpbin.org/anything&quot;\n|&gt; Http.post()\n|&gt; Http.jsonBody(encode { name = &quot;John&quot; })\n|&gt; Http.send()\n</code></pre>\n","type":"Http.Request","name":"jsonBody","source":"/*\nSets the body of the request to the given object encoded to JSON\n\n  \"https://httpbin.org/anything\"\n  |> Http.post()\n  |> Http.jsonBody(encode { name = \"John\" })\n  |> Http.send()\n*/\nfun jsonBody (body : Object, request : Http.Request) : Http.Request {\n  { request | body = `JSON.stringify(#{body})` }\n}","arguments":[{"type":"Object","name":"body"},{"type":"Http.Request","name":"request"}]},{"description":"<p>Sets the body of the request to the given string</p>\n<pre><code>formData =\n  FormData.empty()\n  |&gt; FormData.addString(&quot;key&quot;, &quot;value&quot;)\n\n&quot;https://httpbin.org/anything&quot;\n|&gt; Http.post()\n|&gt; Http.formDataBody(formData)\n|&gt; Http.send()\n</code></pre>\n","type":"Http.Request","name":"formDataBody","source":"/*\nSets the body of the request to the given string\n\n  formData =\n    FormData.empty()\n    |> FormData.addString(\"key\", \"value\")\n\n  \"https://httpbin.org/anything\"\n  |> Http.post()\n  |> Http.formDataBody(formData)\n  |> Http.send()\n*/\nfun formDataBody (body : FormData, request : Http.Request) : Http.Request {\n  { request | body = `#{body}` }\n}","arguments":[{"type":"FormData","name":"body"},{"type":"Http.Request","name":"request"}]},{"description":"<p>Sets the method of the request to the given one.</p>\n<pre><code>Http.empty()\n|&gt; Http.method(&quot;PATCH&quot;)\n</code></pre>\n","type":"Http.Request","name":"method","source":"/*\nSets the method of the request to the given one.\n\n  Http.empty()\n  |> Http.method(\"PATCH\")\n*/\nfun method (method : String, request : Http.Request) : Http.Request {\n  { request | method = method }\n}","arguments":[{"type":"String","name":"method"},{"type":"Http.Request","name":"request"}]},{"description":"<p>Sets the withCredentials of the request to the given one.</p>\n<pre><code>Http.empty()\n|&gt; Http.withCredentials(true)\n</code></pre>\n","type":"Http.Request","name":"withCredentials","source":"/*\nSets the withCredentials of the request to the given one.\n\n  Http.empty()\n  |> Http.withCredentials(true)\n*/\nfun withCredentials (value : Bool, request : Http.Request) : Http.Request {\n  { request | withCredentials = value }\n}","arguments":[{"type":"Bool","name":"value"},{"type":"Http.Request","name":"request"}]},{"description":"<p>Sets the URL of the request to the given one.</p>\n<pre><code>Http.empty()\n|&gt; Http.url(&quot;https://httpbin.org/anything&quot;)\n</code></pre>\n","type":"Http.Request","name":"url","source":"/*\nSets the URL of the request to the given one.\n\n  Http.empty()\n  |> Http.url(\"https://httpbin.org/anything\")\n*/\nfun url (url : String, request : Http.Request) : Http.Request {\n  { request | url = url }\n}","arguments":[{"type":"String","name":"url"},{"type":"Http.Request","name":"request"}]},{"description":"<p>Adds a header to the request with the given key and value.</p>\n<pre><code>Http.empty()\n|&gt; Http.header(&quot;Content-Type&quot;, &quot;application/json&quot;)\n</code></pre>\n","type":"Http.Request","name":"header","source":"/*\nAdds a header to the request with the given key and value.\n\n  Http.empty()\n  |> Http.header(\"Content-Type\", \"application/json\")\n*/\nfun header (key : String, value : String, request : Http.Request) : Http.Request {\n  { request |\n    headers =\n      Array.push(\n        `new Record({ value: #{value}, key: #{key} })`, \n        request.headers)\n  }\n}","arguments":[{"type":"String","name":"key"},{"type":"String","name":"value"},{"type":"Http.Request","name":"request"}]},{"description":"<p>Aborts all running requests.</p>\n<pre><code>Http.abortAll()\n</code></pre>\n","type":"Void","name":"abortAll","source":"/*\nAborts all running requests.\n\n  Http.abortAll()\n*/\nfun abortAll : Void {\n  `\n    this._requests && Object.keys(this._requests).forEach((uid) => {\n      this._requests[uid].abort()\n      delete this._requests[uid]\n    })\n    `\n}","arguments":[]},{"description":"<p>Returns all running requuests.</p>\n","type":"Map(String, Http.NativeRequest)","name":"requests","source":"/* Returns all running requuests. */\nfun requests : Map(String, Http.NativeRequest) {\n  `this._requests`\n}","arguments":[]},{"description":"<p>Sends the request with a generated unique id.</p>\n<pre><code>&quot;https://httpbin.org/get&quot;\n|&gt; Http.get()\n|&gt; Http.send()\n</code></pre>\n","type":"Promise(Http.ErrorResponse, Http.Response)","name":"send","source":"/*\nSends the request with a generated unique id.\n\n  \"https://httpbin.org/get\"\n  |> Http.get()\n  |> Http.send()\n*/\nfun send (request : Http.Request) : Promise(Http.ErrorResponse, Http.Response) {\n  sendWithID(Uid.generate(), request)\n}","arguments":[{"type":"Http.Request","name":"request"}]},{"description":"<p>Sends the request with the given ID so it could be aborted later.</p>\n<pre><code>&quot;https://httpbin.org/get&quot;\n|&gt; Http.get()\n|&gt; Http.sendWithID(&quot;my-request&quot;)\n</code></pre>\n","type":"Promise(Http.ErrorResponse, Http.Response)","name":"sendWithID","source":"/*\nSends the request with the given ID so it could be aborted later.\n\n  \"https://httpbin.org/get\"\n  |> Http.get()\n  |> Http.sendWithID(\"my-request\")\n*/\nfun sendWithID (uid : String, request : Http.Request) : Promise(Http.ErrorResponse, Http.Response) {\n  `\n    new Promise((resolve, reject) => {\n      if (!this._requests) { this._requests = {} }\n\n      let xhr = new XMLHttpRequest()\n\n      this._requests[#{uid}] = xhr\n\n      xhr.withCredentials = #{request.withCredentials}\n\n      try {\n        xhr.open(#{request.method}.toUpperCase(), #{request.url}, true)\n      } catch (error) {\n        delete this._requests[#{uid}]\n\n        reject(#{{\n  type = Http.Error::BadUrl,\n  status = `xhr.status`,\n  url = request.url\n}})\n      }\n\n      #{request.headers}.forEach((item) => {\n        xhr.setRequestHeader(item.key, item.value)\n      })\n\n      xhr.addEventListener('error', (event) => {\n        delete this._requests[#{uid}]\n\n        reject(#{{\n  type = Http.Error::NetworkError,\n  status = `xhr.status`,\n  url = request.url\n}})\n      })\n\n      xhr.addEventListener('timeout', (event) => {\n        delete this._requests[#{uid}]\n\n        reject(#{{\n  type = Http.Error::Timeout,\n  status = `xhr.status`,\n  url = request.url\n}})\n      })\n\n      xhr.addEventListener('load', (event) => {\n        delete this._requests[#{uid}]\n\n        resolve(#{{\n  body = `xhr.responseText`,\n  status = `xhr.status`\n}})\n      })\n\n      xhr.addEventListener('abort', (event) => {\n        delete this._requests[#{uid}]\n\n        reject(#{{\n  type = Http.Error::Aborted,\n  status = `xhr.status`,\n  url = request.url\n}})\n      })\n\n      xhr.send(#{request.body})\n    })\n    `\n}","arguments":[{"type":"String","name":"uid"},{"type":"Http.Request","name":"request"}]}]},{"description":"<p>A module for parsing and stringifing JSON format.</p>\n","name":"Json","functions":[{"description":"<p>Parses a string into an <code>Object</code>, returns <code>Maybe.nothing()</code>\nif the parsing failed.</p>\n<pre><code>Json.parse(&quot;{}&quot;) == Maybe.just(`{}`)\nJson.parse(&quot;{&quot;) == Maybe.nothing()\n</code></pre>\n","type":"Maybe(Object)","name":"parse","source":"/*\nParses a string into an `Object`, returns `Maybe.nothing()`\nif the parsing failed.\n\n  Json.parse(\"{}\") == Maybe.just(`{}`)\n  Json.parse(\"{\") == Maybe.nothing()\n*/\nfun parse (input : String) : Maybe(Object) {\n  `\n    (() => {\n      try {\n        return #{Maybe::Just(`JSON.parse(#{input})`)}\n      } catch (error) {\n        return #{Maybe::Nothing}\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"input"}]},{"description":"<p>Stringifies am <code>Object</code> into JSON string.</p>\n<pre><code>Json.stringify(`{ a: &quot;Hello&quot; }`) == &quot;{ \\&quot;a\\&quot;: \\&quot;Hello\\&quot; }&quot;\n</code></pre>\n","type":"String","name":"stringify","source":"/*\nStringifies am `Object` into JSON string.\n\n  Json.stringify(`{ a: \"Hello\" }`) == \"{ \\\"a\\\": \\\"Hello\\\" }\"\n*/\nfun stringify (input : Object) : String {\n  `JSON.stringify(#{input})`\n}","arguments":[{"type":"Object","name":"input"}]}]},{"description":"<p>Functions for the Map data structure for mapping keys to values.</p>\n","name":"Map","functions":[{"description":"<p>Returns an empty map.</p>\n","type":"Map(x, z)","name":"empty","source":"/* Returns an empty map. */\nfun empty : Map(x, z) {\n  `new Map()`\n}","arguments":[]},{"description":"<p>Sets the given value to the kiven key in the map.</p>\n<pre><code>Map.empty()\n|&gt; Map.set(&quot;key&quot;, &quot;value&quot;)\n</code></pre>\n","type":"Map(x, z)","name":"set","source":"/*\nSets the given value to the kiven key in the map.\n\n  Map.empty()\n  |> Map.set(\"key\", \"value\")\n*/\nfun set (key : x, value : z, map : Map(x, z)) : Map(x, z) {\n  `\n    (() => {\n      const newMap = new Map()\n\n      for (let item of #{map}) {\n        newMap.set(item[0], item[1])\n      }\n\n      newMap.set(#{key}, #{value})\n\n      return newMap\n    })()\n    `\n}","arguments":[{"type":"x","name":"key"},{"type":"z","name":"value"},{"type":"Map(x, z)","name":"map"}]},{"description":"<p>Gets the value for the given key of the given map.</p>\n<pre><code>Map.empty()\n|&gt; Map.set(&quot;key&quot;, &quot;value&quot;)\n|&gt; Map.get(&quot;key&quot;) == Maybe.just(&quot;value&quot;)\n</code></pre>\n","type":"Maybe(z)","name":"get","source":"/*\nGets the value for the given key of the given map.\n\n  Map.empty()\n  |> Map.set(\"key\", \"value\")\n  |> Map.get(\"key\") == Maybe.just(\"value\")\n*/\nfun get (key : x, map : Map(x, z)) : Maybe(z) {\n  `\n    (() => {\n      if (#{map}.has(#{key})) {\n        return #{Maybe::Just(`#{map}.get(#{key})`)}\n      } else {\n        return #{Maybe::Nothing}\n      }\n    })()\n    `\n}","arguments":[{"type":"x","name":"key"},{"type":"Map(x, z)","name":"map"}]},{"description":"<p>Gets the value for the given key of the given map using the\ngiven value as fallback.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;key&quot;, &quot;value&quot;)\n|&gt; Map.getWithDefault(&quot;key&quot;, &quot;fallback&quot;)) == &quot;value&quot;\n\n(Map.empty()\n|&gt; Map.getWithDefault(&quot;key&quot;, &quot;fallback&quot;)) == &quot;fallback&quot;\n</code></pre>\n","type":"value","name":"getWithDefault","source":"/*\nGets the value for the given key of the given map using the\ngiven value as fallback.\n\n  (Map.empty()\n  |> Map.set(\"key\", \"value\")\n  |> Map.getWithDefault(\"key\", \"fallback\")) == \"value\"\n\n  (Map.empty()\n  |> Map.getWithDefault(\"key\", \"fallback\")) == \"fallback\"\n*/\nfun getWithDefault (key : key, value : value, map : Map(key, value)) : value {\n  get(key, map)\n  |> Maybe.withDefault(value)\n}","arguments":[{"type":"key","name":"key"},{"type":"value","name":"value"},{"type":"Map(key, value)","name":"map"}]},{"description":"<p>Merges two maps together where the second has the precendence.</p>\n<pre><code>a =\n  Map.empty()\n  |&gt; Map.set(&quot;a&quot;, &quot;b&quot;)\n\nb =\n  Map.empty()\n  |&gt; Map.set(&quot;a&quot;, &quot;y&quot;)\n\n(Map.merge(a, b)\n|&gt; Map.get(&quot;a&quot;)) == Maybe.just(&quot;y&quot;)\n</code></pre>\n","type":"Map(x, z)","name":"merge","source":"/*\nMerges two maps together where the second has the precendence.\n\n  a =\n    Map.empty()\n    |> Map.set(\"a\", \"b\")\n\n  b =\n    Map.empty()\n    |> Map.set(\"a\", \"y\")\n\n  (Map.merge(a, b)\n  |> Map.get(\"a\")) == Maybe.just(\"y\")\n*/\nfun merge (map1 : Map(x, z), map2 : Map(x, z)) : Map(x, z) {\n  `\n    (() => {\n      const map = new Map()\n\n      for (let item of #{map1}) {\n        map.set(item[0], item[1])\n      }\n\n      for (let item of #{map2}) {\n        map.set(item[0], item[1])\n      }\n\n      return map\n    })()\n    `\n}","arguments":[{"type":"Map(x, z)","name":"map1"},{"type":"Map(x, z)","name":"map2"}]},{"description":"<p>Reduces the map from the left using the given accumulator function.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 1)\n|&gt; Map.set(&quot;b&quot;, 2)\n|&gt; Map.reduce(\n  0,\n  (memo : Number, key : String, value : Number) : Number { memo + value })) == 3\n</code></pre>\n","type":"memo","name":"reduce","source":"/*\nReduces the map from the left using the given accumulator function.\n\n  (Map.empty()\n  |> Map.set(\"a\", 1)\n  |> Map.set(\"b\", 2)\n  |> Map.reduce(\n    0,\n    (memo : Number, key : String, value : Number) : Number { memo + value })) == 3\n*/\nfun reduce (\n  memo : memo,\n  method : Function(memo, key, value, memo),\n  map : Map(key, value)\n) : memo {\n  `\n    (() => {\n      let memo = #{memo}\n\n      for (let item of #{map}) {\n        memo = #{method}(memo, item[0], item[1])\n      }\n\n      return memo\n    })()\n    `\n}","arguments":[{"type":"memo","name":"memo"},{"type":"Function(memo, key, value, memo)","name":"method"},{"type":"Map(key, value)","name":"map"}]},{"description":"<p>Returns the first key which is matched by the given function.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 0)\n|&gt; Map.set(&quot;b&quot;, 1)\n|&gt; Map.findKey((value : Number) : Bool {\n  value == 1\n})) == Maybe.just(&quot;b&quot;)\n</code></pre>\n","type":"Maybe(key)","name":"findKey","source":"/*\nReturns the first key which is matched by the given function.\n\n  (Map.empty()\n  |> Map.set(\"a\", 0)\n  |> Map.set(\"b\", 1)\n  |> Map.findKey((value : Number) : Bool {\n    value == 1\n  })) == Maybe.just(\"b\")\n*/\nfun findKey (\n  method : Function(value, Bool),\n  map : Map(key, value)\n) : Maybe(key) {\n  `\n    (() => {\n      for (let item of #{map}) {\n        if (#{method}(item[1])) {\n          return #{Maybe::Just(`item[0]`)}\n        }\n      }\n\n      return #{Maybe::Nothing}\n    })()\n    `\n}","arguments":[{"type":"Function(value, Bool)","name":"method"},{"type":"Map(key, value)","name":"map"}]},{"description":"<p>Removes all keys from the map which match the given value.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 1)\n|&gt; Map.set(&quot;b&quot;, 1)\n|&gt; Map.deleteValue(1)) == Map.empty()\n</code></pre>\n","type":"Map(key, value)","name":"deleteValue","source":"/*\nRemoves all keys from the map which match the given value.\n\n  (Map.empty()\n  |> Map.set(\"a\", 1)\n  |> Map.set(\"b\", 1)\n  |> Map.deleteValue(1)) == Map.empty()\n*/\nfun deleteValue (value : value, map : Map(key, value)) : Map(key, value) {\n  `\n    (() => {\n      const newMap = new Map()\n\n      for (let item of #{map}) {\n        if (!_compare(item[1], #{value})) {\n          newMap.set(item[0], item[1])\n        }\n      }\n\n      return newMap\n    })()\n    `\n}","arguments":[{"type":"value","name":"value"},{"type":"Map(key, value)","name":"map"}]},{"description":"<p>Removes the given key from the map</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 1)\n|&gt; Map.delete(&quot;a&quot;)) == Map.empty()\n</code></pre>\n","type":"Map(key, value)","name":"delete","source":"/*\nRemoves the given key from the map\n\n  (Map.empty()\n  |> Map.set(\"a\", 1)\n  |> Map.delete(\"a\")) == Map.empty()\n*/\nfun delete (key : key, map : Map(key, value)) : Map(key, value) {\n  `\n    (() => {\n      const newMap = new Map()\n\n      for (let item of #{map}) {\n        if (!_compare(item[0], #{key})) {\n          newMap.set(item[0], item[1])\n        }\n      }\n\n      return newMap\n    })()\n    `\n}","arguments":[{"type":"key","name":"key"},{"type":"Map(key, value)","name":"map"}]},{"description":"<p>Returns the values of a map as an array.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 1)\n|&gt; Map.set(&quot;b&quot;, 2)\n|&gt; Map.values()) == [1, 2]\n</code></pre>\n","type":"Array(a)","name":"values","source":"/*\nReturns the values of a map as an array.\n\n  (Map.empty()\n  |> Map.set(\"a\", 1)\n  |> Map.set(\"b\", 2)\n  |> Map.values()) == [1, 2]\n*/\nfun values (map : Map(k, a)) : Array(a) {\n  `Array.from(#{map}.values())`\n}","arguments":[{"type":"Map(k, a)","name":"map"}]},{"description":"<p>Returns the keys of a map as an array.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 1)\n|&gt; Map.set(&quot;b&quot;, 2)\n|&gt; Map.values()) == [&quot;a&quot;, &quot;b&quot;]\n</code></pre>\n","type":"Array(k)","name":"keys","source":"/*\nReturns the keys of a map as an array.\n\n  (Map.empty()\n  |> Map.set(\"a\", 1)\n  |> Map.set(\"b\", 2)\n  |> Map.values()) == [\"a\", \"b\"]\n*/\nfun keys (map : Map(k, a)) : Array(k) {\n  `Array.from(#{map}.keys())`\n}","arguments":[{"type":"Map(k, a)","name":"map"}]},{"description":"<p>Sorts the map using the given function.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 1)\n|&gt; Map.set(&quot;b&quot;, 2)\n|&gt; Map.sortBy((key : String, value : Number) : Number {\n  value - 100\n})\n|&gt; Map.values()) == [&quot;b&quot;, &quot;a&quot;]\n</code></pre>\n","type":"Map(k, v)","name":"sortBy","source":"/*\nSorts the map using the given function.\n\n  (Map.empty()\n  |> Map.set(\"a\", 1)\n  |> Map.set(\"b\", 2)\n  |> Map.sortBy((key : String, value : Number) : Number {\n    value - 100\n  })\n  |> Map.values()) == [\"b\", \"a\"]\n*/\nfun sortBy (method : Function(k, v, b), map : Map(k, v)) : Map(k, v) {\n  `\n    (() => {\n      return new Map(Array.from(#{map}).sort((a, b) => {\n        let aVal = #{method}(a[0], a[1])\n        let bVal = #{method}(b[0], b[1])\n\n        if (aVal < bVal) {\n          return -1\n        }\n\n        if (aVal > bVal) {\n          return 1\n        }\n\n        return 0\n      }))\n    })()\n    `\n}","arguments":[{"type":"Function(k, v, b)","name":"method"},{"type":"Map(k, v)","name":"map"}]},{"description":"<p>Returns whether or not the map is empty.</p>\n<pre><code>(Map.empty()\n|&gt; Map.isEmpty()) == true\n\n(Map.empty()\n|&gt; Map.set(&quot;a&quot;, &quot;b&quot;)\n|&gt; Map.isEmpty()) == false\n</code></pre>\n","type":"Bool","name":"isEmpty","source":"/*\nReturns whether or not the map is empty.\n\n  (Map.empty()\n  |> Map.isEmpty()) == true\n\n  (Map.empty()\n  |> Map.set(\"a\", \"b\")\n  |> Map.isEmpty()) == false\n*/\nfun isEmpty (map : Map(k, a)) : Bool {\n  map\n  |> keys()\n  |> Array.isEmpty()\n}","arguments":[{"type":"Map(k, a)","name":"map"}]},{"description":"<p>Map over the given map with the given function.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 1)\n|&gt; Map.set(&quot;b&quot;, 2)\n|&gt; Map.map((key : String, value : Number) : Number {\n  value * 2\n})\n|&gt; Map.values()) == [2,4]\n</code></pre>\n","type":"Map(k, b)","name":"map","source":"/*\nMap over the given map with the given function.\n\n  (Map.empty()\n  |> Map.set(\"a\", 1)\n  |> Map.set(\"b\", 2)\n  |> Map.map((key : String, value : Number) : Number {\n    value * 2\n  })\n  |> Map.values()) == [2,4]\n*/\nfun map (method : Function(k, a, b), map : Map(k, a)) : Map(k, b) {\n  `\n    (() => {\n      const newMap = new Map()\n\n      for (let item of #{map}) {\n        newMap.set(item[0], #{method}(item[0], item[1]))\n      }\n\n      return newMap\n    })()\n    `\n}","arguments":[{"type":"Function(k, a, b)","name":"method"},{"type":"Map(k, a)","name":"map"}]},{"description":"<p>Returns whether or not the map has the given key or not.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 1)\n|&gt; Map.has(&quot;a&quot;)) == true\n</code></pre>\n","type":"Bool","name":"has","source":"/*\nReturns whether or not the map has the given key or not.\n\n  (Map.empty()\n  |> Map.set(\"a\", 1)\n  |> Map.has(\"a\")) == true\n*/\nfun has (key : k, map : Map(k, a)) : Bool {\n  `#{map}.has(#{key})`\n}","arguments":[{"type":"k","name":"key"},{"type":"Map(k, a)","name":"map"}]},{"description":"<p>Returns the number of items in the map.</p>\n<pre><code>(Map.empty()\n|&gt; Map.set(&quot;a&quot;, 1)\n|&gt; Map.size()) == 1\n</code></pre>\n","type":"Number","name":"size","source":"/*\nReturns the number of items in the map.\n\n  (Map.empty()\n  |> Map.set(\"a\", 1)\n  |> Map.size()) == 1\n*/\nfun size (map : Map(key, value)) : Number {\n  `#{map}.size`\n}","arguments":[{"type":"Map(key, value)","name":"map"}]}]},{"description":"<p>Mathematical functions.</p>\n","name":"Math","functions":[{"description":"<p>Negates the given number.</p>\n<pre><code>Math.negate(1) == -1\n</code></pre>\n","type":"Number","name":"negate","source":"/*\nNegates the given number.\n\n  Math.negate(1) == -1\n*/\nfun negate (number : Number) : Number {\n  `-#{number}`\n}","arguments":[{"type":"Number","name":"number"}]},{"description":"<p>Returns the absolute value of the given number.</p>\n<pre><code>Math.abs(1) == 1\nMath.abs(-1) == 1\n</code></pre>\n","type":"Number","name":"abs","source":"/*\nReturns the absolute value of the given number.\n\n  Math.abs(1) == 1\n  Math.abs(-1) == 1\n*/\nfun abs (number : Number) : Number {\n  `Math.abs(#{number})`\n}","arguments":[{"type":"Number","name":"number"}]},{"description":"<p>Returns the smallest integer greater than or equal to a given number.</p>\n<pre><code>Math.ceil(0.3) == 1\n</code></pre>\n","type":"Number","name":"ceil","source":"/*\nReturns the smallest integer greater than or equal to a given number.\n\n  Math.ceil(0.3) == 1\n*/\nfun ceil (number : Number) : Number {\n  `Math.ceil(#{number})`\n}","arguments":[{"type":"Number","name":"number"}]},{"description":"<p>Returns the largest integer less than or equal to a given number.</p>\n<pre><code>Math.floor(0.8) == 0\n</code></pre>\n","type":"Number","name":"floor","source":"/*\nReturns the largest integer less than or equal to a given number.\n\n  Math.floor(0.8) == 0\n*/\nfun floor (number : Number) : Number {\n  `Math.floor(#{number})`\n}","arguments":[{"type":"Number","name":"number"}]},{"description":"<p>Returns the value of a number rounded to the nearest integer.</p>\n<pre><code>Math.round(0.5) == 1\n</code></pre>\n","type":"Number","name":"round","source":"/*\nReturns the value of a number rounded to the nearest integer.\n\n  Math.round(0.5) == 1\n*/\nfun round (number : Number) : Number {\n  `Math.round(#{number})`\n}","arguments":[{"type":"Number","name":"number"}]},{"description":"<p>Returns the lowest-valued number from the arguments.</p>\n<pre><code>Math.min(1, 2) == 1\n</code></pre>\n","type":"Number","name":"min","source":"/*\nReturns the lowest-valued number from the arguments.\n\n  Math.min(1, 2) == 1\n*/\nfun min (number1 : Number, number2 : Number) : Number {\n  `Math.min(#{number1}, #{number2})`\n}","arguments":[{"type":"Number","name":"number1"},{"type":"Number","name":"number2"}]},{"description":"<p>Returns the highest-valued number from the arguments.</p>\n<pre><code>Math.min(1, 2) == 2\n</code></pre>\n","type":"Number","name":"max","source":"/*\nReturns the highest-valued number from the arguments.\n\n  Math.min(1, 2) == 2\n*/\nfun max (number1 : Number, number2 : Number) : Number {\n  `Math.max(#{number1}, #{number2})`\n}","arguments":[{"type":"Number","name":"number1"},{"type":"Number","name":"number2"}]},{"description":"<p>Returns the square root of the given number</p>\n<pre><code>Math.sqrt(4) == 2\n</code></pre>\n","type":"Number","name":"sqrt","source":"/*\nReturns the square root of the given number\n\n  Math.sqrt(4) == 2\n*/\nfun sqrt (value : Number) : Number {\n  `Math.sqrt(#{value})`\n}","arguments":[{"type":"Number","name":"value"}]},{"description":"<p>Returns the exponent power of the given number.</p>\n<pre><code>Math.pow(2, 2) == 4\n</code></pre>\n","type":"Number","name":"pow","source":"/*\nReturns the exponent power of the given number.\n\n  Math.pow(2, 2) == 4\n*/\nfun pow (exponent : Number, value : Number) : Number {\n  `Math.pow(#{value}, #{exponent})`\n}","arguments":[{"type":"Number","name":"exponent"},{"type":"Number","name":"value"}]},{"description":"<p>Clamps the given number between the given upper and lower bounds.</p>\n<pre><code>Math.clamp(0, 10, 100) == 10\nMath.clamp(0, 10, -100) == 0\n</code></pre>\n","type":"Number","name":"clamp","source":"/*\nClamps the given number between the given upper and lower bounds.\n\n  Math.clamp(0, 10, 100) == 10\n  Math.clamp(0, 10, -100) == 0\n*/\nfun clamp (lower : Number, upper : Number, value : Number) : Number {\n  Math.min(upper, Math.max(lower, value))\n}","arguments":[{"type":"Number","name":"lower"},{"type":"Number","name":"upper"},{"type":"Number","name":"value"}]},{"description":"<p>Returns the floating-point remainder of two numbers.</p>\n<pre><code>Math.fmod(5.3, 2) == 1.3\nMath.fmod(18.5, 4.2) == 1.7\n</code></pre>\n","type":"Number","name":"fmod","source":"/*\nReturns the floating-point remainder of two numbers.\n\n  Math.fmod(5.3, 2) == 1.3\n  Math.fmod(18.5, 4.2) == 1.7\n*/\nfun fmod (a : Number, b : Number) : Number {\n  `Number((#{a} - (Math.floor(#{a} / #{b}) * #{b})).toPrecision(8))`\n}","arguments":[{"type":"Number","name":"a"},{"type":"Number","name":"b"}]},{"description":"<p>Truncates the given number to the giver amount.</p>\n<pre><code>Math.truncate(0.123456) == 0.12\n</code></pre>\n","type":"Number","name":"truncate","source":"/*\nTruncates the given number to the giver amount.\n\n  Math.truncate(0.123456) == 0.12\n*/\nfun truncate (to : Number, value : Number) : Number {\n  `Math.trunc(#{value} * #{multiplier}) / #{multiplier}`\n} where {\n  multiplier =\n    if (to == 0) {\n      1\n    } else {\n      to * 100\n    }\n}","arguments":[{"type":"Number","name":"to"},{"type":"Number","name":"value"}]}]},{"description":null,"name":"Maybe","functions":[{"description":"<p>Returns nothing.</p>\n","type":"Maybe(a)","name":"nothing","source":"/* Returns nothing. */\nfun nothing : Maybe(a) {\n  Maybe::Nothing\n}","arguments":[]},{"description":"<p>Returns a maybe containing just the given value.</p>\n","type":"Maybe(a)","name":"just","source":"/* Returns a maybe containing just the given value. */\nfun just (value : a) : Maybe(a) {\n  Maybe::Just(value)\n}","arguments":[{"type":"a","name":"value"}]},{"description":"<p>Returns whether or not the maybe is just a value or not.</p>\n<pre><code> Maybe.isJust(Maybe.just(&quot;A&quot;)) == true\n Maybe.isJust(Maybe.nothing()) == false\n</code></pre>\n","type":"Bool","name":"isJust","source":"/*\nReturns whether or not the maybe is just a value or not.\n\n   Maybe.isJust(Maybe.just(\"A\")) == true\n   Maybe.isJust(Maybe.nothing()) == false\n*/\nfun isJust (maybe : Maybe(a)) : Bool {\n  case (maybe) {\n    Maybe::Nothing => false\n    Maybe::Just => true\n  }\n}","arguments":[{"type":"Maybe(a)","name":"maybe"}]},{"description":"<p>Returns whether or not the maybe is just nothing or not.</p>\n<pre><code>Maybe.isNothing(Maybe.just(&quot;A&quot;)) == false\nMaybe.isNothing(Maybe.nothing(&quot;A&quot;)) == false\n</code></pre>\n","type":"Bool","name":"isNothing","source":"/*\nReturns whether or not the maybe is just nothing or not.\n\n  Maybe.isNothing(Maybe.just(\"A\")) == false\n  Maybe.isNothing(Maybe.nothing(\"A\")) == false\n*/\nfun isNothing (maybe : Maybe(a)) : Bool {\n  case (maybe) {\n    Maybe::Nothing => true\n    Maybe::Just => false\n  }\n}","arguments":[{"type":"Maybe(a)","name":"maybe"}]},{"description":"<p>Maps the value of a maybe.</p>\n<pre><code>(Maybe.just(1)\n|&gt; Maybe.map((number : Number) : Number { number + 2 })) == 3\n</code></pre>\n","type":"Maybe(b)","name":"map","source":"/*\nMaps the value of a maybe.\n\n  (Maybe.just(1)\n  |> Maybe.map((number : Number) : Number { number + 2 })) == 3\n*/\nfun map (func : Function(a, b), maybe : Maybe(a)) : Maybe(b) {\n  case (maybe) {\n    Maybe::Just value => Maybe::Just(func(value))\n    Maybe::Nothing => Maybe::Nothing\n  }\n}","arguments":[{"type":"Function(a, b)","name":"func"},{"type":"Maybe(a)","name":"maybe"}]},{"description":"<p>Returns the value of a maybe or the given value if it's nothing.</p>\n<pre><code>Maybe.withDefault(&quot;A&quot;, Maybe.nothing()) == &quot;A&quot;\nMaybe.withDefault(&quot;A&quot;, Maybe.just(&quot;B&quot;)) == &quot;B&quot;\n</code></pre>\n","type":"a","name":"withDefault","source":"/*\nReturns the value of a maybe or the given value if it's nothing.\n\n  Maybe.withDefault(\"A\", Maybe.nothing()) == \"A\"\n  Maybe.withDefault(\"A\", Maybe.just(\"B\")) == \"B\"\n*/\nfun withDefault (defaultValue : a, maybe : Maybe(a)) : a {\n  case (maybe) {\n    Maybe::Nothing => defaultValue\n    Maybe::Just value => value\n  }\n}","arguments":[{"type":"a","name":"defaultValue"},{"type":"Maybe(a)","name":"maybe"}]},{"description":"<p>Converts the maybe to a result using the given value as the error.</p>\n<pre><code>Maybe.toResult(&quot;Error&quot;, Maybe.nothing()) == Result.error(&quot;Error&quot;)\nMaybe.toResult(&quot;Error&quot;, Maybe.just(&quot;A&quot;)) == Result.ok(&quot;A&quot;)\n</code></pre>\n","type":"Result(b, a)","name":"toResult","source":"/*\nConverts the maybe to a result using the given value as the error.\n\n  Maybe.toResult(\"Error\", Maybe.nothing()) == Result.error(\"Error\")\n  Maybe.toResult(\"Error\", Maybe.just(\"A\")) == Result.ok(\"A\")\n*/\nfun toResult (error : b, maybe : Maybe(a)) : Result(b, a) {\n  case (maybe) {\n    Maybe::Just value => Result::Ok(value)\n    Maybe::Nothing => Result::Err(error)\n  }\n}","arguments":[{"type":"b","name":"error"},{"type":"Maybe(a)","name":"maybe"}]},{"description":"<p>Flattens a nested maybe.</p>\n<pre><code>(Maybe.just(&quot;A&quot;)\n|&gt; Maybe.just()\n|&gt; Maybe.flatten()) == Maybe.just(&quot;A&quot;)\n</code></pre>\n","type":"Maybe(a)","name":"flatten","source":"/*\nFlattens a nested maybe.\n\n  (Maybe.just(\"A\")\n  |> Maybe.just()\n  |> Maybe.flatten()) == Maybe.just(\"A\")\n*/\nfun flatten (maybe : Maybe(Maybe(a))) : Maybe(a) {\n  case (maybe) {\n    Maybe::Nothing => Maybe::Nothing\n    Maybe::Just value => value\n  }\n}","arguments":[{"type":"Maybe(Maybe(a))","name":"maybe"}]},{"description":"<p>Returns the first maybe with value of the array or nothing\nif it's all nothing.</p>\n<pre><code>Maybe.oneOf([Maybe.just(&quot;A&quot;), Maybe.nothing()]) == Maybe.just(&quot;A&quot;)\n</code></pre>\n","type":"Maybe(a)","name":"oneOf","source":"/*\nReturns the first maybe with value of the array or nothing\nif it's all nothing.\n\n  Maybe.oneOf([Maybe.just(\"A\"), Maybe.nothing()]) == Maybe.just(\"A\")\n*/\nfun oneOf (array : Array(Maybe(a))) : Maybe(a) {\n  array\n  |> Array.find((item : Maybe(a)) : Bool { Maybe.isJust(item) })\n  |> flatten()\n}","arguments":[{"type":"Array(Maybe(a))","name":"array"}]}]},{"description":null,"name":"Number","functions":[{"description":"<p>Returns true if number is odd.</p>\n<pre><code>Number.isOdd(1) == false\nNumber.isOdd(2) == true\n</code></pre>\n","type":"Bool","name":"isOdd","source":"/*\nReturns true if number is odd.\n\n  Number.isOdd(1) == false\n  Number.isOdd(2) == true\n*/\nfun isOdd (input : Number) : Bool {\n  `#{input} % 2 === 1`\n}","arguments":[{"type":"Number","name":"input"}]},{"description":"<p>Returns true if number is even.</p>\n<pre><code>Number.isEven(1) == true\nNumber.isEven(2) == false\n</code></pre>\n","type":"Bool","name":"isEven","source":"/*\nReturns true if number is even.\n\n  Number.isEven(1) == true\n  Number.isEven(2) == false\n*/\nfun isEven (input : Number) : Bool {\n  `Math.abs(#{input} % 2) === 0`\n}","arguments":[{"type":"Number","name":"input"}]},{"description":"<p>Returns true if a number is a <code>NaN</code>.</p>\n<pre><code>Number.isNaN(`NaN`) == true\nNumber.isNaN(0) == false\n</code></pre>\n","type":"Bool","name":"isNaN","source":"/*\nReturns true if a number is a `NaN`.\n\n  Number.isNaN(`NaN`) == true\n  Number.isNaN(0) == false\n*/\nfun isNaN (input : Number) : Bool {\n  `isNaN(#{input})`\n}","arguments":[{"type":"Number","name":"input"}]},{"description":"<p>Returns the string representation of the given number.</p>\n<pre><code>Number.toString(123) == 123\n</code></pre>\n","type":"String","name":"toString","source":"/*\nReturns the string representation of the given number.\n\n  Number.toString(123) == 123\n*/\nfun toString (input : Number) : String {\n  `#{input}.toString()`\n}","arguments":[{"type":"Number","name":"input"}]},{"description":"<p>Formats a number using fixed-point notation.</p>\n<p>The first arguments speficies the number of digits to appear after the decimal\npoint, it can be between 0 and 20.</p>\n<pre><code>Number.toFixed(2, 0.1234567) == &quot;0.12&quot;\n</code></pre>\n","type":"String","name":"toFixed","source":"/*\nFormats a number using fixed-point notation.\n\nThe first arguments speficies the number of digits to appear after the decimal\npoint, it can be between 0 and 20.\n\n  Number.toFixed(2, 0.1234567) == \"0.12\"\n*/\nfun toFixed (decimalPlaces : Number, input : Number) : String {\n  `#{input}.toFixed(#{decimalPlaces})`\n}","arguments":[{"type":"Number","name":"decimalPlaces"},{"type":"Number","name":"input"}]},{"description":"<p>Tries to parse the given string into a number.</p>\n<pre><code>Number.fromString(&quot;asd&quot;) == Maybe.nothing()\nNumber.fromString(&quot;012&quot;) == Maybe.just(12)\n</code></pre>\n","type":"Maybe(Number)","name":"fromString","source":"/*\nTries to parse the given string into a number.\n\n  Number.fromString(\"asd\") == Maybe.nothing()\n  Number.fromString(\"012\") == Maybe.just(12)\n*/\nfun fromString (input : String) : Maybe(Number) {\n  `\n    (() => {\n      let value = parseFloat(#{input})\n\n      if (isNaN(value)) {\n        return #{Maybe::Nothing}\n      } else {\n        return #{Maybe::Just(`value`)}\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"input"}]},{"description":"<p>Formats the given number using the griven prefix and separating the digits\nby 3 with a comma.</p>\n<pre><code>Number.format(&quot;$ &quot;, 1034150) == &quot;$ 1,034,150&quot;\n</code></pre>\n","type":"String","name":"format","source":"/*\nFormats the given number using the griven prefix and separating the digits\nby 3 with a comma.\n\n  Number.format(\"$ \", 1034150) == \"$ 1,034,150\"\n*/\nfun format (prefix : String, number : Number) : String {\n  try {\n    string =\n      Number.toFixed(2, number)\n\n    parts =\n      String.split(\".\", string)\n\n    digits =\n      parts[0]\n      |> Maybe.withDefault(\"\")\n      |> String.lchop(\"-\")\n      |> String.split(\"\")\n      |> Array.groupsOfFromEnd(3)\n      |> Array.map(String.join(\"\"))\n      |> String.join(\",\")\n\n    decimals =\n      parts[1]\n      |> Maybe.withDefault(\"\")\n      |> String.rchop(\"0\")\n\n    if (String.isEmpty(decimals)) {\n      prefix + digits\n    } else {\n      prefix + digits + \".\" + decimals\n    }\n  }\n}","arguments":[{"type":"String","name":"prefix"},{"type":"Number","name":"number"}]}]},{"description":"<p>Functions for decoding specific types from an <code>Object</code>.</p>\n","name":"Object.Decode","functions":[{"description":"<p>Decodes an field from an object using the given decoder.</p>\n","type":"Result(Object.Error, a)","name":"field","source":"/* Decodes an field from an object using the given decoder. */\nfun field (\n  key : String,\n  decoder : Function(Object, Result(Object.Error, a)),\n  input : Object\n) : Result(Object.Error, a) {\n  `Decoder.field(#{key}, #{decoder})(#{input})`\n}","arguments":[{"type":"String","name":"key"},{"type":"Function(Object, Result(Object.Error, a))","name":"decoder"},{"type":"Object","name":"input"}]},{"description":"<p>Decodes the object as a <code>String</code></p>\n","type":"Result(Object.Error, String)","name":"string","source":"/* Decodes the object as a `String` */\nfun string (input : Object) : Result(Object.Error, String) {\n  `Decoder.string(#{input})`\n}","arguments":[{"type":"Object","name":"input"}]},{"description":"<p>Decodes the object as a <code>Time</code></p>\n","type":"Result(Object.Error, Time)","name":"time","source":"/* Decodes the object as a `Time` */\nfun time (input : Object) : Result(Object.Error, Time) {\n  `Decoder.time(#{input})`\n}","arguments":[{"type":"Object","name":"input"}]},{"description":"<p>Decodes the object as a <code>Number</code></p>\n","type":"Result(Object.Error, Number)","name":"number","source":"/* Decodes the object as a `Number` */\nfun number (input : Object) : Result(Object.Error, Number) {\n  `Decoder.number(#{input})`\n}","arguments":[{"type":"Object","name":"input"}]},{"description":"<p>Decodes the object as a <code>Bool</code></p>\n","type":"Result(Object.Error, Bool)","name":"boolean","source":"/* Decodes the object as a `Bool` */\nfun boolean (input : Object) : Result(Object.Error, Bool) {\n  `Decoder.boolean(#{input})`\n}","arguments":[{"type":"Object","name":"input"}]},{"description":"<p>Decodes the object as a <code>Array</code> using the given decoder.</p>\n","type":"Result(Object.Error, Array(a))","name":"array","source":"/* Decodes the object as a `Array` using the given decoder. */\nfun array (\n  decoder : Function(Object, Result(Object.Error, a)),\n  input : Object\n) : Result(Object.Error, Array(a)) {\n  `Decoder.array(#{decoder})(#{input})`\n}","arguments":[{"type":"Function(Object, Result(Object.Error, a))","name":"decoder"},{"type":"Object","name":"input"}]},{"description":"<p>Decodes the object as a <code>Maybe(a)</code> using the given decoder.</p>\n","type":"Result(Object.Error, Maybe(a))","name":"maybe","source":"/* Decodes the object as a `Maybe(a)` using the given decoder. */\nfun maybe (\n  decoder : Function(Object, Result(Object.Error, a)),\n  input : Object\n) : Result(Object.Error, Maybe(a)) {\n  `Decoder.maybe(#{decoder})(#{input})`\n}","arguments":[{"type":"Function(Object, Result(Object.Error, a))","name":"decoder"},{"type":"Object","name":"input"}]}]},{"description":"<p>Functions for encoding values to an <code>Object</code>.</p>\n","name":"Object.Encode","functions":[{"description":"<p>Encodes a <code>String</code></p>\n","type":"Object","name":"string","source":"/* Encodes a `String` */\nfun string (input : String) : Object {\n  `#{input}`\n}","arguments":[{"type":"String","name":"input"}]},{"description":"<p>Encodes a <code>Bool</code></p>\n","type":"Object","name":"boolean","source":"/* Encodes a `Bool` */\nfun boolean (input : Bool) : Object {\n  `#{input}`\n}","arguments":[{"type":"Bool","name":"input"}]},{"description":"<p>Encodes a <code>Number</code></p>\n","type":"Object","name":"number","source":"/* Encodes a `Number` */\nfun number (input : Number) : Object {\n  `#{input}`\n}","arguments":[{"type":"Number","name":"input"}]},{"description":"<p>Encodes a <code>Time</code></p>\n","type":"Object","name":"time","source":"/* Encodes a `Time` */\nfun time (input : Time) : Object {\n  `#{input}.toISOString()`\n}","arguments":[{"type":"Time","name":"input"}]},{"description":"<p>Encodes an <code>Array</code> of objects.</p>\n","type":"Object","name":"array","source":"/* Encodes an `Array` of objects. */\nfun array (input : Array(Object)) : Object {\n  `#{input}`\n}","arguments":[{"type":"Array(Object)","name":"input"}]},{"description":"<p>Encodes a field of an object.</p>\n","type":"Object.Field","name":"field","source":"/* Encodes a field of an object. */\nfun field (name : String, value : Object) : Object.Field {\n  `{ name: #{name}, value: #{value} }`\n}","arguments":[{"type":"String","name":"name"},{"type":"Object","name":"value"}]},{"description":"<p>Encodes an array of fields as an object.</p>\n","type":"Object","name":"object","source":"/* Encodes an array of fields as an object. */\nfun object (fields : Array(Object.Field)) : Object {\n  `\n    (() => {\n      let result = {}\n\n      for (let item of #{fields}) {\n        result[item.name] = item.value\n      }\n\n      return result\n    })()\n    `\n}","arguments":[{"type":"Array(Object.Field)","name":"fields"}]}]},{"description":"<p>Utility functions for <code>Object.Error</code> type.</p>\n","name":"Object.Error","functions":[{"description":"<p>Formats the error as string.</p>\n","type":"String","name":"toString","source":"/* Formats the error as string. */\nfun toString (error : Object.Error) : String {\n  `#{error}.toString()`\n}","arguments":[{"type":"Object.Error","name":"error"}]}]},{"description":"<p>Utility functions for working with promises.</p>\n","name":"Promise","functions":[{"description":"<p>Returns a resolved promise with <code>Void</code> which never fails.</p>\n","type":"Promise(Never, Void)","name":"never","source":"/* Returns a resolved promise with `Void` which never fails. */\nfun never : Promise(Never, Void) {\n  resolve(void)\n}","arguments":[]},{"description":"<p>Creates an already rejected <code>Promise</code></p>\n","type":"Promise(a, b)","name":"reject","source":"/* Creates an already rejected `Promise` */\nfun reject (input : a) : Promise(a, b) {\n  `Promise.reject(#{input})`\n}","arguments":[{"type":"a","name":"input"}]},{"description":"<p>Creates an already resolved <code>Promise</code></p>\n","type":"Promise(b, a)","name":"resolve","source":"/* Creates an already resolved `Promise` */\nfun resolve (input : a) : Promise(b, a) {\n  `Promise.resolve(#{input})`\n}","arguments":[{"type":"a","name":"input"}]}]},{"description":"<p>Functions for working with regular expressions.</p>\n","name":"Regexp","functions":[{"description":"<p>Creates a new regular expression from a string.</p>\n<pre><code>(Regexp.create(&quot;test&quot;)\n|&gt; Regexp.toString()) == &quot;/test/&quot;\n</code></pre>\n","type":"Regexp","name":"create","source":"/*\nCreates a new regular expression from a string.\n\n  (Regexp.create(\"test\")\n  |> Regexp.toString()) == \"/test/\"\n*/\nfun create (input : String) : Regexp {\n  `new RegExp(#{input})`\n}","arguments":[{"type":"String","name":"input"}]},{"description":"<p>Creates a new regular expression using the given options.</p>\n<pre><code>(Regexp.createWithOptions(\n  &quot;test&quot;,\n  {\n    caseInsensitive = true,\n    multiline = true,\n    unicode = true,\n    global = true,\n    sticky = true\n  })\n|&gt; Regexp.toString()) == &quot;/test/gimuy&quot;\n</code></pre>\n","type":"Regexp","name":"createWithOptions","source":"/*\nCreates a new regular expression using the given options.\n\n  (Regexp.createWithOptions(\n    \"test\",\n    {\n      caseInsensitive = true,\n      multiline = true,\n      unicode = true,\n      global = true,\n      sticky = true\n    })\n  |> Regexp.toString()) == \"/test/gimuy\"\n*/\nfun createWithOptions (input : String, options : Regexp.Options) : Regexp {\n  `\n    (() => {\n      let flags = \"\"\n\n      if (#{options.caseInsensitive}) { flags += \"i\" }\n      if (#{options.multiline}) { flags += \"m\" }\n      if (#{options.unicode}) { flags += \"u\" }\n      if (#{options.global}) { flags += \"g\" }\n      if (#{options.sticky}) { flags += \"y\" }\n\n      return new RegExp(#{input}, flags)\n    })()\n    `\n}","arguments":[{"type":"String","name":"input"},{"type":"Regexp.Options","name":"options"}]},{"description":"<p>Returns the string representation of the given regular expression.</p>\n<pre><code>(Regexp.create(&quot;test&quot;)\n|&gt; Regexp.toString()) == &quot;/test/&quot;\n</code></pre>\n","type":"String","name":"toString","source":"/*\nReturns the string representation of the given regular expression.\n\n  (Regexp.create(\"test\")\n  |> Regexp.toString()) == \"/test/\"\n*/\nfun toString (regexp : Regexp) : String {\n  `#{regexp}.toString()`\n}","arguments":[{"type":"Regexp","name":"regexp"}]},{"description":"<p>Escapes the given input to use in the regular expression.</p>\n<pre><code>Regexp.escape(&quot;-{&quot;) == &quot;\\\\-\\\\{&quot;\n</code></pre>\n","type":"String","name":"escape","source":"/*\nEscapes the given input to use in the regular expression.\n\n  Regexp.escape(\"-{\") == \"\\\\-\\\\{\"\n*/\nfun escape (input : String) : String {\n  `#{input}.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')`\n}","arguments":[{"type":"String","name":"input"}]},{"description":"<p>Splits the given string by the given regular expression.</p>\n<pre><code>(Regexp.create(&quot;,&quot;)\n|&gt; Regexp.split(&quot;a,b,c,d&quot;)) == [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]\n</code></pre>\n","type":"Array(String)","name":"split","source":"/*\nSplits the given string by the given regular expression.\n\n  (Regexp.create(\",\")\n  |> Regexp.split(\"a,b,c,d\")) == [\"a\", \"b\", \"c\", \"d\"]\n*/\nfun split (input : String, regexp : Regexp) : Array(String) {\n  `#{input}.split(#{regexp})`\n}","arguments":[{"type":"String","name":"input"},{"type":"Regexp","name":"regexp"}]},{"description":"<p>Returns whether or not the given regular expression matches the given string.</p>\n<pre><code>(Regexp.create(&quot;,&quot;)\n|&gt; Regexp.match(&quot;asd,asd&quot;)) == true\n</code></pre>\n","type":"Bool","name":"match","source":"/*\nReturns whether or not the given regular expression matches the given string.\n\n  (Regexp.create(\",\")\n  |> Regexp.match(\"asd,asd\")) == true\n*/\nfun match (input : String, regexp : Regexp) : Bool {\n  `#{regexp}.test(#{input})`\n}","arguments":[{"type":"String","name":"input"},{"type":"Regexp","name":"regexp"}]},{"description":"<p>Returns all of the matches of the given regular expession agains the\ngiven string.</p>\n<pre><code>(Regexp.createWithOptions(\n  &quot;\\\\w&quot;,\n  {\n    caseInsensitive = true,\n    multiline = false,\n    unicode = false,\n    global = true,\n    sticky = false\n  })\n|&gt; Regexp.matces(&quot;a,b,c,d&quot;) == [\n  {\n    submatches = [],\n    match = &quot;a&quot;,\n    index = 0\n  }\n]\n  \\match : Regexp.Match =&gt; match.match + &quot;1&quot;)) == &quot;a1,b1,c1,d1&quot;\n</code></pre>\n","type":"Array(Regexp.Match)","name":"matches","source":"/*\nReturns all of the matches of the given regular expession agains the\ngiven string.\n\n  (Regexp.createWithOptions(\n    \"\\\\w\",\n    {\n      caseInsensitive = true,\n      multiline = false,\n      unicode = false,\n      global = true,\n      sticky = false\n    })\n  |> Regexp.matces(\"a,b,c,d\") == [\n    {\n      submatches = [],\n      match = \"a\",\n      index = 0\n    }\n  ]\n    \\match : Regexp.Match => match.match + \"1\")) == \"a1,b1,c1,d1\"\n*/\nfun matches (input : String, regexp : Regexp) : Array(Regexp.Match) {\n  `\n    (() => {\n      let results = []\n      let index = 0\n\n      #{input}.replace(#{regexp}, function() {\n        const args =\n          Array.from(arguments)\n\n        const match =\n          args.shift()\n\n        const submatches =\n          args.slice(0, -2)\n\n        index += 1\n\n        results.push(#{{\n  submatches = `submatches`,\n  index = `index`,\n  match = `match`\n}})\n      })\n\n      return results\n    })()\n    `\n}","arguments":[{"type":"String","name":"input"},{"type":"Regexp","name":"regexp"}]},{"description":"<p>Replaces the matches of the given regular expression using the given function\nto caluclate the replacement string.</p>\n<pre><code>(Regexp.createWithOptions(\n  &quot;\\\\w&quot;,\n  {\n    caseInsensitive = true,\n    multiline = false,\n    unicode = false,\n    global = true,\n    sticky = false\n  })\n|&gt; Regexp.replace(\n  &quot;a,b,c,d&quot;,\n  \\match : Regexp.Match =&gt; match.match + &quot;1&quot;)) == &quot;a1,b1,c1,d1&quot;\n</code></pre>\n","type":"String","name":"replace","source":"/*\nReplaces the matches of the given regular expression using the given function\nto caluclate the replacement string.\n\n  (Regexp.createWithOptions(\n    \"\\\\w\",\n    {\n      caseInsensitive = true,\n      multiline = false,\n      unicode = false,\n      global = true,\n      sticky = false\n    })\n  |> Regexp.replace(\n    \"a,b,c,d\",\n    \\match : Regexp.Match => match.match + \"1\")) == \"a1,b1,c1,d1\"\n*/\nfun replace (\n  input : String,\n  replacer : Function(Regexp.Match, String),\n  regexp : Regexp\n) : String {\n  `\n    (() => {\n      let index = 0\n\n      return #{input}.replace(#{regexp}, function() {\n        const args =\n          Array.from(arguments)\n\n        const match =\n          args.shift()\n\n        const submatches =\n          args.slice(0, -2)\n\n        index += 1\n\n        return #{replacer}(#{{\n  submatches = `submatches`,\n  index = `index`,\n  match = `match`\n}})\n      })\n    })()\n    `\n}","arguments":[{"type":"String","name":"input"},{"type":"Function(Regexp.Match, String)","name":"replacer"},{"type":"Regexp","name":"regexp"}]}]},{"description":"<p>Utility function for the <code>Result</code> type.</p>\n","name":"Result","functions":[{"description":"<p>Returns a new ok result.</p>\n<pre><code>(Result.ok(&quot;ok&quot;)\n|&gt; Result.isOk()) == true\n</code></pre>\n","type":"Result(b, a)","name":"ok","source":"/*\nReturns a new ok result.\n\n  (Result.ok(\"ok\")\n  |> Result.isOk()) == true\n*/\nfun ok (input : a) : Result(b, a) {\n  Result::Ok(input)\n}","arguments":[{"type":"a","name":"input"}]},{"description":"<p>Returns a new error result.</p>\n<pre><code>(Result.error(&quot;error&quot;)\n|&gt; Result.isError()) == true\n</code></pre>\n","type":"Result(a, b)","name":"error","source":"/*\nReturns a new error result.\n\n  (Result.error(\"error\")\n  |> Result.isError()) == true\n*/\nfun error (input : a) : Result(a, b) {\n  Result::Err(input)\n}","arguments":[{"type":"a","name":"input"}]},{"description":"<p>Returns the value of the given result or the default value if it's an error.</p>\n<pre><code>(Result.error(&quot;error&quot;)\n|&gt; Result.withDefault(&quot;a&quot;)) == &quot;a&quot;\n\n(Result.ok(&quot;ok&quot;)\n|&gt; Result.withDefault(&quot;a&quot;)) == &quot;ok&quot;\n</code></pre>\n","type":"b","name":"withDefault","source":"/*\nReturns the value of the given result or the default value if it's an error.\n\n  (Result.error(\"error\")\n  |> Result.withDefault(\"a\")) == \"a\"\n\n  (Result.ok(\"ok\")\n  |> Result.withDefault(\"a\")) == \"ok\"\n*/\nfun withDefault (defaultValue : b, input : Result(a, b)) : b {\n  case (input) {\n    Result::Ok value => value\n    Result::Err => defaultValue\n  }\n}","arguments":[{"type":"b","name":"defaultValue"},{"type":"Result(a, b)","name":"input"}]},{"description":"<p>Returns the error of the given result or the default value if it's an ok.</p>\n<pre><code>(Result.error(&quot;error&quot;)\n|&gt; Result.withDefault(&quot;a&quot;)) == &quot;error&quot;\n\n(Result.ok(&quot;ok&quot;)\n|&gt; Result.withDefault(&quot;a&quot;)) == &quot;a&quot;\n</code></pre>\n","type":"a","name":"withError","source":"/*\nReturns the error of the given result or the default value if it's an ok.\n\n  (Result.error(\"error\")\n  |> Result.withDefault(\"a\")) == \"error\"\n\n  (Result.ok(\"ok\")\n  |> Result.withDefault(\"a\")) == \"a\"\n*/\nfun withError (defaultError : a, input : Result(a, b)) : a {\n  case (input) {\n    Result::Err value => value\n    Result::Ok => defaultError\n  }\n}","arguments":[{"type":"a","name":"defaultError"},{"type":"Result(a, b)","name":"input"}]},{"description":"<p>Maps over the value of the given result.</p>\n<pre><code>(Result.error(&quot;error&quot;)\n|&gt; Result.map(\\item : String =&gt; item + &quot;1&quot;)) == Result.error(&quot;error&quot;)\n\n(Result.ok(&quot;ok&quot;)\n|&gt; Result.map(\\item : String =&gt; item + &quot;1&quot;)) == Result.ok(&quot;ok1&quot;)\n</code></pre>\n","type":"Result(a, c)","name":"map","source":"/*\nMaps over the value of the given result.\n\n  (Result.error(\"error\")\n  |> Result.map(\\item : String => item + \"1\")) == Result.error(\"error\")\n\n  (Result.ok(\"ok\")\n  |> Result.map(\\item : String => item + \"1\")) == Result.ok(\"ok1\")\n*/\nfun map (func : Function(b, c), input : Result(a, b)) : Result(a, c) {\n  case (input) {\n    Result::Ok value => Result::Ok(func(value))\n    Result::Err => input\n  }\n}","arguments":[{"type":"Function(b, c)","name":"func"},{"type":"Result(a, b)","name":"input"}]},{"description":"<p>Maps over the error of the given result.</p>\n<pre><code>(Result.error(&quot;error&quot;)\n|&gt; Result.mapError(\\item : String =&gt; item + &quot;1&quot;)) == Result.error(&quot;error1&quot;)\n\n(Result.ok(&quot;ok&quot;)\n|&gt; Result.mapError(\\item : String =&gt; item + &quot;1&quot;)) == Result.ok(&quot;ok&quot;)\n</code></pre>\n","type":"Result(c, b)","name":"mapError","source":"/*\nMaps over the error of the given result.\n\n  (Result.error(\"error\")\n  |> Result.mapError(\\item : String => item + \"1\")) == Result.error(\"error1\")\n\n  (Result.ok(\"ok\")\n  |> Result.mapError(\\item : String => item + \"1\")) == Result.ok(\"ok\")\n*/\nfun mapError (func : Function(a, c), input : Result(a, b)) : Result(c, b) {\n  case (input) {\n    Result::Err value => Result::Err(func(value))\n    Result::Ok => input\n  }\n}","arguments":[{"type":"Function(a, c)","name":"func"},{"type":"Result(a, b)","name":"input"}]},{"description":"<p>Returns true if the result is ok.</p>\n<pre><code>(Result.ok(&quot;ok&quot;)\n|&gt; Result.isOk()) == true\n</code></pre>\n","type":"Bool","name":"isOk","source":"/*\nReturns true if the result is ok.\n\n  (Result.ok(\"ok\")\n  |> Result.isOk()) == true\n*/\nfun isOk (input : Result(a, b)) : Bool {\n  case (input) {\n    Result::Err => false\n    Result::Ok => true\n  }\n}","arguments":[{"type":"Result(a, b)","name":"input"}]},{"description":"<p>Returns true if the result is an error.</p>\n<pre><code>(Result.error(&quot;error&quot;)\n|&gt; Result.isError()) == true\n</code></pre>\n","type":"Bool","name":"isError","source":"/*\nReturns true if the result is an error.\n\n  (Result.error(\"error\")\n  |> Result.isError()) == true\n*/\nfun isError (input : Result(a, b)) : Bool {\n  case (input) {\n    Result::Err => true\n    Result::Ok => false\n  }\n}","arguments":[{"type":"Result(a, b)","name":"input"}]},{"description":"<p>Converts the given result into a maybe.</p>\n<pre><code>(Result.ok(&quot;blah&quot;)\n|&gt; Result.toMaybe()) == Maybe.just(&quot;blah&quot;)\n\n(Result.error(&quot;blah&quot;)\n|&gt; Result.toMaybe()) == Maybe.nothing()\n</code></pre>\n","type":"Maybe(b)","name":"toMaybe","source":"/*\nConverts the given result into a maybe.\n\n  (Result.ok(\"blah\")\n  |> Result.toMaybe()) == Maybe.just(\"blah\")\n\n  (Result.error(\"blah\")\n  |> Result.toMaybe()) == Maybe.nothing()\n*/\nfun toMaybe (result : Result(a, b)) : Maybe(b) {\n  case (result) {\n    Result::Ok value => Maybe::Just(value)\n    Result::Err => Maybe::Nothing\n  }\n}","arguments":[{"type":"Result(a, b)","name":"result"}]},{"description":null,"type":"Result(error, value)","name":"join","source":"fun join (input : Result(error, Result(error, value))) : Result(error, value) {\n  case (input) {\n    Result::Ok value => value\n    Result::Err => input\n  }\n}","arguments":[{"type":"Result(error, Result(error, value))","name":"input"}]},{"description":null,"type":"Result(error, b)","name":"flatMap","source":"fun flatMap (\n  func : Function(a, Result(error, b)),\n  input : Result(error, a)\n) : Result(error, b) {\n  Result.map(func, input)\n  |> Result.join()\n}","arguments":[{"type":"Function(a, Result(error, b))","name":"func"},{"type":"Result(error, a)","name":"input"}]}]},{"description":"<p>Module for manipulating search parameters.</p>\n","name":"SearchParams","functions":[{"description":"<p>Returns an empty search parameters object.</p>\n","type":"SearchParams","name":"empty","source":"/* Returns an empty search parameters object. */\nfun empty : SearchParams {\n  `new URLSearchParams()`\n}","arguments":[]},{"description":"<p>Parses a string into a search parameters object.</p>\n","type":"SearchParams","name":"fromString","source":"/* Parses a string into a search parameters object. */\nfun fromString (value : String) : SearchParams {\n  `new URLSearchParams(#{value})`\n}","arguments":[{"type":"String","name":"value"}]},{"description":"<p>Returns the first value associated to the given search parameter.</p>\n","type":"Maybe(String)","name":"get","source":"/* Returns the first value associated to the given search parameter. */\nfun get (key : String, params : SearchParams) : Maybe(String) {\n  `\n    (() => {\n      let value = #{params}.get(#{key})\n\n      if (value === null) {\n        return #{Maybe::Nothing}\n      } else {\n        return #{Maybe::Just(`value`)}\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"key"},{"type":"SearchParams","name":"params"}]},{"description":"<p>Returns a <code>Bool</code> indicating if such a search parameter exists.</p>\n","type":"Bool","name":"has","source":"/* Returns a `Bool` indicating if such a search parameter exists. */\nfun has (key : String, params : SearchParams) : Bool {\n  `#{params}.has(#{key})`\n}","arguments":[{"type":"String","name":"key"},{"type":"SearchParams","name":"params"}]},{"description":"<p>Deletes the given search parameter, and its associated value, from the\nlist of all search parameters.</p>\n","type":"SearchParams","name":"delete","source":"/*\nDeletes the given search parameter, and its associated value, from the\nlist of all search parameters.\n*/\nfun delete (key : String, params : SearchParams) : SearchParams {\n  `\n    (() => {\n      let newParams = new URLSearchParams(#{params}.toString())\n      newParams.delete(#{key})\n      return newParams\n    })()\n    `\n}","arguments":[{"type":"String","name":"key"},{"type":"SearchParams","name":"params"}]},{"description":"<p>Sets the value associated to a given search parameter to the given value.\nIf there were several values, delete the others.</p>\n","type":"SearchParams","name":"set","source":"/*\nSets the value associated to a given search parameter to the given value.\nIf there were several values, delete the others.\n*/\nfun set (key : String, value : String, params : SearchParams) : SearchParams {\n  `\n    (() => {\n      let newParams = new URLSearchParams(#{params}.toString())\n      newParams.set(#{key}, #{value})\n      return newParams\n    })()\n    `\n}","arguments":[{"type":"String","name":"key"},{"type":"String","name":"value"},{"type":"SearchParams","name":"params"}]},{"description":"<p>Appends a specified key/value pair as a new search parameter.</p>\n","type":"SearchParams","name":"append","source":"/* Appends a specified key/value pair as a new search parameter. */\nfun append (key : String, value : String, params : SearchParams) : SearchParams {\n  `\n    (() => {\n      let newParams = new URLSearchParams(#{params}.toString())\n      newParams.append(#{key}, #{value})\n      return newParams\n    })()\n    `\n}","arguments":[{"type":"String","name":"key"},{"type":"String","name":"value"},{"type":"SearchParams","name":"params"}]},{"description":"<p>Returns a string containing a query string suitable for use in a URL.</p>\n","type":"String","name":"toString","source":"/* Returns a string containing a query string suitable for use in a URL. */\nfun toString (params : SearchParams) : String {\n  `#{params}.toString()`\n}","arguments":[{"type":"SearchParams","name":"params"}]}]},{"description":"<p>Functions for the Set data structure which represents a set of unique values.</p>\n","name":"Set","functions":[{"description":"<p>Returns an empty set.</p>\n","type":"Set(a)","name":"empty","source":"/* Returns an empty set. */\nfun empty : Set(a) {\n  `new Set()`\n}","arguments":[]},{"description":"<p>Converts the Set to an Array.</p>\n<pre><code>(Set.empty()\n|&gt; Set.add(&quot;value&quot;)\n|&gt; Set.toArray()) == [&quot;value&quot;]\n</code></pre>\n","type":"Array(a)","name":"toArray","source":"/*\nConverts the Set to an Array.\n\n  (Set.empty()\n  |> Set.add(\"value\")\n  |> Set.toArray()) == [\"value\"]\n*/\nfun toArray (set : Set(a)) : Array(a) {\n  `Array.from(#{set})`\n}","arguments":[{"type":"Set(a)","name":"set"}]},{"description":"<p>Converts an Array to a Set.</p>\n<pre><code>(Set.empty()\n|&gt; Set.add(&quot;value&quot;)) == Set.fromArray([&quot;value&quot;])\n</code></pre>\n","type":"Set(a)","name":"fromArray","source":"/*\nConverts an Array to a Set.\n\n  (Set.empty()\n  |> Set.add(\"value\")) == Set.fromArray([\"value\"])\n*/\nfun fromArray (array : Array(a)) : Set(a) {\n  `new Set(#{array})`\n}","arguments":[{"type":"Array(a)","name":"array"}]},{"description":"<p>Returns whether or not the given set has the given value.</p>\n<pre><code>(Set.empty()\n|&gt; Set.add(Maybe.just(&quot;value&quot;))\n|&gt; Set.has(Maybe.just(&quot;value&quot;))) == true\n</code></pre>\n","type":"Bool","name":"has","source":"/*\nReturns whether or not the given set has the given value.\n\n  (Set.empty()\n  |> Set.add(Maybe.just(\"value\"))\n  |> Set.has(Maybe.just(\"value\"))) == true\n*/\nfun has (value : a, set : Set(a)) : Bool {\n  `\n    (() => {\n      for (let item of #{set}) {\n        if (_compare(item, #{value})) {\n          return true\n        }\n      }\n\n      return false\n    })()\n    `\n}","arguments":[{"type":"a","name":"value"},{"type":"Set(a)","name":"set"}]},{"description":"<p>Adds the given value to the set.</p>\n<pre><code>(Set.empty()\n|&gt; Set.add(&quot;value&quot;)) == Set.fromArray([&quot;value&quot;])\n</code></pre>\n","type":"Set(a)","name":"add","source":"/*\nAdds the given value to the set.\n\n  (Set.empty()\n  |> Set.add(\"value\")) == Set.fromArray([\"value\"])\n*/\nfun add (value : a, set : Set(a)) : Set(a) {\n  `\n    (() => {\n      if (#{has(value, set)}) { return #{set} }\n\n      const newSet = new Set()\n\n      #{set}.forEach((item) => {\n        newSet.add(item)\n      })\n\n      newSet.add(#{value})\n\n      return newSet\n    })()\n    `\n}","arguments":[{"type":"a","name":"value"},{"type":"Set(a)","name":"set"}]},{"description":"<p>Deletes the given value from the set.</p>\n<pre><code>(Set.empty()\n|&gt; Set.add(&quot;value&quot;)\n|&gt; Set.delete(&quot;value&quot;)) == Set.empty()\n</code></pre>\n","type":"Set(a)","name":"delete","source":"/*\nDeletes the given value from the set.\n\n  (Set.empty()\n  |> Set.add(\"value\")\n  |> Set.delete(\"value\")) == Set.empty()\n*/\nfun delete (value : a, set : Set(a)) : Set(a) {\n  `\n    (() => {\n      const newSet = new Set()\n\n      #{set}.forEach((item) => {\n        if (_compare(item, #{value})) { return }\n        newSet.add(item)\n      })\n\n      return newSet\n    })()\n    `\n}","arguments":[{"type":"a","name":"value"},{"type":"Set(a)","name":"set"}]},{"description":"<p>Maps over the items of the set to return a new set.</p>\n<pre><code>(Set.fromArray([0])\n|&gt; Set.map(Number.toString)) == Set.fromArray([&quot;0&quot;])\n</code></pre>\n","type":"Set(b)","name":"map","source":"/*\nMaps over the items of the set to return a new set.\n\n  (Set.fromArray([0])\n  |> Set.map(Number.toString)) == Set.fromArray([\"0\"])\n*/\nfun map (method : Function(a, b), set : Set(a)) : Set(b) {\n  `\n    (() => {\n      const newSet = new Set()\n\n      #{set}.forEach((item) => {\n        newSet.add(#{method}(item))\n      })\n\n      return newSet\n    })()\n    `\n}","arguments":[{"type":"Function(a, b)","name":"method"},{"type":"Set(a)","name":"set"}]},{"description":"<p>Returns the size of a set</p>\n<pre><code>Set.size(Set.fromArray([0,1,2])) == 3\n</code></pre>\n","type":"Number","name":"size","source":"/*\nReturns the size of a set\n\n  Set.size(Set.fromArray([0,1,2])) == 3\n*/\nfun size (set : Set(a)) : Number {\n  `#{set}.size`\n}","arguments":[{"type":"Set(a)","name":"set"}]}]},{"description":"<p>Common implementation of the storage api.</p>\n","name":"Storage.Common","functions":[{"description":"<p>Sets the given key to the given value in the given storage.</p>\n","type":"Result(Storage.Error, Void)","name":"set","source":"/* Sets the given key to the given value in the given storage. */\nfun set (storage : Storage, key : String, value : String) : Result(Storage.Error, Void) {\n  `\n    (() => {\n      try {\n        #{storage}.setItem(#{key}, #{value})\n        return #{Result::Ok(void)}\n      } catch (error) {\n        switch(error.name) {\n          case 'SecurityError':\n            return #{Result::Err(Storage.Error::SecurityError)}\n          case 'QUOTA_EXCEEDED_ERR':\n            return #{Result::Err(Storage.Error::QuotaExceeded)}\n          case 'QuotaExceededError':\n            return #{Result::Err(Storage.Error::QuotaExceeded)}\n          case 'NS_ERROR_DOM_QUOTA_REACHED':\n            return #{Result::Err(Storage.Error::QuotaExceeded)}\n          default:\n            return #{Result::Err(Storage.Error::Unkown)}\n        }\n      }\n    })()\n    `\n}","arguments":[{"type":"Storage","name":"storage"},{"type":"String","name":"key"},{"type":"String","name":"value"}]},{"description":"<p>Gets the value of given key in the given storage.</p>\n","type":"Result(Storage.Error, String)","name":"get","source":"/* Gets the value of given key in the given storage. */\nfun get (storage : Storage, key : String) : Result(Storage.Error, String) {\n  `\n    (() => {\n      try {\n        let value = #{storage}.getItem(#{key})\n\n        if (typeof value === \"string\") {\n          return #{Result::Ok(`value`)}\n        } else {\n          return #{Result::Err(Storage.Error::NotFound)}\n        }\n      } catch (error) {\n        switch(error.name) {\n          case 'SecurityError':\n            return #{Result::Err(Storage.Error::SecurityError)}\n          default:\n            return #{Result::Err(Storage.Error::Unkown)}\n        }\n      }\n    })()\n    `\n}","arguments":[{"type":"Storage","name":"storage"},{"type":"String","name":"key"}]},{"description":"<p>Removes the value with the given key from the given storage.</p>\n","type":"Result(Storage.Error, Void)","name":"remove","source":"/* Removes the value with the given key from the given storage. */\nfun remove (storage : Storage, key : String) : Result(Storage.Error, Void) {\n  `\n    (() => {\n      try {\n        #{storage}.removeItem(#{key})\n        return #{Result::Ok(void)}\n      } catch (error) {\n        switch(error.name) {\n          case 'SecurityError':\n            return #{Result::Err(Storage.Error::SecurityError)}\n          default:\n            return #{Result::Err(Storage.Error::Unkown)}\n        }\n      }\n    })()\n    `\n}","arguments":[{"type":"Storage","name":"storage"},{"type":"String","name":"key"}]},{"description":"<p>Clears the given storage.</p>\n","type":"Result(Storage.Error, Void)","name":"clear","source":"/* Clears the given storage. */\nfun clear (storage : Storage) : Result(Storage.Error, Void) {\n  `\n    (() => {\n      try {\n        #{storage}.clear()\n        return #{Result::Ok(void)}\n      } catch (error) {\n        switch(error.name) {\n          case 'SecurityError':\n            return #{Result::Err(Storage.Error::SecurityError)}\n          default:\n            return #{Result::Err(Storage.Error::Unkown)}\n        }\n      }\n    })()\n    `\n}","arguments":[{"type":"Storage","name":"storage"}]},{"description":"<p>Returns the number of items in the storage.</p>\n","type":"Result(Storage.Error, Number)","name":"size","source":"/* Returns the number of items in the storage. */\nfun size (storage : Storage) : Result(Storage.Error, Number) {\n  `\n    (() => {\n      try {\n        return #{Result::Ok(`#{storage}.length`)}\n      } catch (error) {\n        switch(error.name) {\n          case 'SecurityError':\n            return #{Result::Err(Storage.Error::SecurityError)}\n          default:\n            return #{Result::Err(Storage.Error::Unkown)}\n        }\n      }\n    })()\n    `\n}","arguments":[{"type":"Storage","name":"storage"}]},{"description":"<p>Returns the keys in the given storage.</p>\n","type":"Result(Storage.Error, Array(String))","name":"keys","source":"/* Returns the keys in the given storage. */\nfun keys (storage : Storage) : Result(Storage.Error, Array(String)) {\n  `\n    (() => {\n      try {\n        return #{Result::Ok(`Object.keys(#{storage}).sort()`)}\n      } catch (error) {\n        switch(error.name) {\n          case 'SecurityError':\n            return #{Result::Err(Storage.Error::SecurityError)}\n          default:\n            return #{Result::Err(Storage.Error::Unkown)}\n        }\n      }\n    })()\n    `\n}","arguments":[{"type":"Storage","name":"storage"}]}]},{"description":"<p>Functions for the <code>localStorage</code> API.</p>\n","name":"Storage.Local","functions":[{"description":"<p>Sets the given key to the given value.</p>\n","type":"Result(Storage.Error, Void)","name":"set","source":"/* Sets the given key to the given value. */\nfun set (key : String, value : String) : Result(Storage.Error, Void) {\n  Storage.Common.set(`localStorage`, key, value)\n}","arguments":[{"type":"String","name":"key"},{"type":"String","name":"value"}]},{"description":"<p>Gets the value of given key.</p>\n","type":"Result(Storage.Error, String)","name":"get","source":"/* Gets the value of given key. */\nfun get (key : String) : Result(Storage.Error, String) {\n  Storage.Common.get(`localStorage`, key)\n}","arguments":[{"type":"String","name":"key"}]},{"description":"<p>Removes the value with the given key.</p>\n","type":"Result(Storage.Error, Void)","name":"remove","source":"/* Removes the value with the given key. */\nfun remove (key : String) : Result(Storage.Error, Void) {\n  Storage.Common.remove(`localStorage`, key)\n}","arguments":[{"type":"String","name":"key"}]},{"description":"<p>Clears the local storage.</p>\n","type":"Result(Storage.Error, Void)","name":"clear","source":"/* Clears the local storage. */\nfun clear : Result(Storage.Error, Void) {\n  Storage.Common.clear(`localStorage`)\n}","arguments":[]},{"description":"<p>Returns the number of items in the local storage.</p>\n","type":"Result(Storage.Error, Number)","name":"size","source":"/* Returns the number of items in the local storage. */\nfun size : Result(Storage.Error, Number) {\n  Storage.Common.size(`localStorage`)\n}","arguments":[]},{"description":"<p>Returns the keys in the local storage.</p>\n","type":"Result(Storage.Error, Array(String))","name":"keys","source":"/* Returns the keys in the local storage. */\nfun keys : Result(Storage.Error, Array(String)) {\n  Storage.Common.keys(`localStorage`)\n}","arguments":[]}]},{"description":"<p>Functions for the <code>sessionStorage</code> API.</p>\n","name":"Storage.Session","functions":[{"description":"<p>Sets the given key to the given value.</p>\n","type":"Result(Storage.Error, Void)","name":"set","source":"/* Sets the given key to the given value. */\nfun set (key : String, value : String) : Result(Storage.Error, Void) {\n  Storage.Common.set(`sessionStorage`, key, value)\n}","arguments":[{"type":"String","name":"key"},{"type":"String","name":"value"}]},{"description":"<p>Gets the value of given key.</p>\n","type":"Result(Storage.Error, String)","name":"get","source":"/* Gets the value of given key. */\nfun get (key : String) : Result(Storage.Error, String) {\n  Storage.Common.get(`sessionStorage`, key)\n}","arguments":[{"type":"String","name":"key"}]},{"description":"<p>Removes the value with the given key.</p>\n","type":"Result(Storage.Error, Void)","name":"remove","source":"/* Removes the value with the given key. */\nfun remove (key : String) : Result(Storage.Error, Void) {\n  Storage.Common.remove(`sessionStorage`, key)\n}","arguments":[{"type":"String","name":"key"}]},{"description":"<p>Clears the session storage.</p>\n","type":"Result(Storage.Error, Void)","name":"clear","source":"/* Clears the session storage. */\nfun clear : Result(Storage.Error, Void) {\n  Storage.Common.clear(`sessionStorage`)\n}","arguments":[]},{"description":"<p>Returns the number of items in the session storage.</p>\n","type":"Result(Storage.Error, Number)","name":"size","source":"/* Returns the number of items in the session storage. */\nfun size : Result(Storage.Error, Number) {\n  Storage.Common.size(`sessionStorage`)\n}","arguments":[]},{"description":"<p>Returns the keys in the session storage.</p>\n","type":"Result(Storage.Error, Array(String))","name":"keys","source":"/* Returns the keys in the session storage. */\nfun keys : Result(Storage.Error, Array(String)) {\n  Storage.Common.keys(`sessionStorage`)\n}","arguments":[]}]},{"description":"<p>Utility functions for working with <code>String</code>.</p>\n","name":"String","functions":[{"description":"<p>Converts the given string to lowercase.</p>\n<pre><code> String.toLowerCase(&quot;ABC&quot;) == &quot;abc&quot;\n</code></pre>\n","type":"String","name":"toLowerCase","source":"/*\nConverts the given string to lowercase.\n\n   String.toLowerCase(\"ABC\") == \"abc\"\n*/\nfun toLowerCase (string : String) : String {\n  `#{string}.toLowerCase()`\n}","arguments":[{"type":"String","name":"string"}]},{"description":"<p>Converts the given string to lowercase.</p>\n<pre><code> String.toUpperCase(&quot;abc&quot;) == &quot;ABC&quot;\n</code></pre>\n","type":"String","name":"toUpperCase","source":"/*\nConverts the given string to lowercase.\n\n   String.toUpperCase(\"abc\") == \"ABC\"\n*/\nfun toUpperCase (string : String) : String {\n  `#{string}.toUpperCase()`\n}","arguments":[{"type":"String","name":"string"}]},{"description":"<p>Reverses the given string.</p>\n<pre><code> String.reverse(&quot;ABC&quot;) == &quot;CBA&quot;\n</code></pre>\n","type":"String","name":"reverse","source":"/*\nReverses the given string.\n\n   String.reverse(\"ABC\") == \"CBA\"\n*/\nfun reverse (string : String) : String {\n  `[...#{string}].reverse().join('')`\n}","arguments":[{"type":"String","name":"string"}]},{"description":"<p>Returns whether or not the string is empty.</p>\n<pre><code> String.isEmpty(&quot;&quot;) == true\n String.isEmpty(&quot;a&quot;) == false\n String.isEmpty(&quot; &quot;) == false\n</code></pre>\n","type":"Bool","name":"isEmpty","source":"/*\nReturns whether or not the string is empty.\n\n   String.isEmpty(\"\") == true\n   String.isEmpty(\"a\") == false\n   String.isEmpty(\" \") == false\n*/\nfun isEmpty (string : String) : Bool {\n  string == \"\"\n}","arguments":[{"type":"String","name":"string"}]},{"description":"<p>Returns if the given pattern is included in the given string.</p>\n<pre><code> String.match(&quot;A&quot;, &quot;ABC&quot;) == true\n String.match(&quot;X&quot;, &quot;ABC&quot;) == false\n</code></pre>\n","type":"Bool","name":"match","source":"/*\nReturns if the given pattern is included in the given string.\n\n   String.match(\"A\", \"ABC\") == true\n   String.match(\"X\", \"ABC\") == false\n*/\nfun match (pattern : String, string : String) : Bool {\n  `#{string}.indexOf(#{pattern}) != -1`\n}","arguments":[{"type":"String","name":"pattern"},{"type":"String","name":"string"}]},{"description":"<p>Splits the given string using the given separator.</p>\n<pre><code>String.split(&quot;&quot;, &quot;AAA&quot;) = [&quot;A&quot;, &quot;A&quot;, &quot;A&quot;]\n</code></pre>\n","type":"Array(String)","name":"split","source":"/*\nSplits the given string using the given separator.\n\n  String.split(\"\", \"AAA\") = [\"A\", \"A\", \"A\"]\n*/\nfun split (separator : String, string : String) : Array(String) {\n  `#{string}.split(#{separator})`\n}","arguments":[{"type":"String","name":"separator"},{"type":"String","name":"string"}]},{"description":"<p>Returns number of characters in the given string.</p>\n<pre><code>String.size(&quot;ABC&quot;) == 3\n</code></pre>\n","type":"Number","name":"size","source":"/*\nReturns number of characters in the given string.\n\n  String.size(\"ABC\") == 3\n*/\nfun size (string : String) : Number {\n  `#{string}.length`\n}","arguments":[{"type":"String","name":"string"}]},{"description":"<p>Capitalizes each letter in the given string.</p>\n<pre><code>String.capitalize(&quot;the cake is a lie!&quot;) == &quot;The Cake Is A Lie!&quot;\n</code></pre>\n","type":"String","name":"capitalize","source":"/*\nCapitalizes each letter in the given string.\n\n  String.capitalize(\"the cake is a lie!\") == \"The Cake Is A Lie!\"\n*/\nfun capitalize (string : String) : String {\n  `#{string}.replace(/\\b[a-z]/g, char => char.toUpperCase())`\n}","arguments":[{"type":"String","name":"string"}]},{"description":"<p>Repeats the given string the given number of times.</p>\n<pre><code>String.repeat(5, &quot;A&quot;) == &quot;AAAAA&quot;\n</code></pre>\n","type":"String","name":"repeat","source":"/*\nRepeats the given string the given number of times.\n\n  String.repeat(5, \"A\") == \"AAAAA\"\n*/\nfun repeat (times : Number, string : String) : String {\n  `#{string}.repeat(#{times})`\n}","arguments":[{"type":"Number","name":"times"},{"type":"String","name":"string"}]},{"description":"<p>Joins the given array of string into a single string using the separator.</p>\n<pre><code>String.join(&quot;,&quot;, [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]) == &quot;A,B,C&quot;\n</code></pre>\n","type":"String","name":"join","source":"/*\nJoins the given array of string into a single string using the separator.\n\n  String.join(\",\", [\"A\",\"B\",\"C\"]) == \"A,B,C\"\n*/\nfun join (separator : String, array : Array(String)) : String {\n  `#{array}.join(#{separator})`\n}","arguments":[{"type":"String","name":"separator"},{"type":"Array(String)","name":"array"}]},{"description":"<p>Joins the given array of strings.</p>\n<pre><code>String.concat([&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]) == &quot;ABC&quot;\n</code></pre>\n","type":"String","name":"concat","source":"/*\nJoins the given array of strings.\n\n  String.concat([\"A\",\"B\",\"C\"]) == \"ABC\"\n*/\nfun concat (array : Array(String)) : String {\n  join(\"\", array)\n}","arguments":[{"type":"Array(String)","name":"array"}]},{"description":"<p>Returns if the given string is an anagram of the other string.</p>\n<pre><code>String.isAnagarm(&quot;asd&quot;, &quot;blah&quot;) == false\nString.isAnagarm(&quot;rail safety&quot;, &quot;fairy tales&quot;) == true\n</code></pre>\n","type":"Bool","name":"isAnagarm","source":"/*\nReturns if the given string is an anagram of the other string.\n\n  String.isAnagarm(\"asd\", \"blah\") == false\n  String.isAnagarm(\"rail safety\", \"fairy tales\") == true\n*/\nfun isAnagarm (string1 : String, string2 : String) : Bool {\n  `\n    (() => {\n      const normalize = string =>\n        string\n          .toLowerCase()\n          .replace(/[^a-z0-9]/gi, '')\n          .split('')\n          .sort()\n          .join('');\n\n      return normalize(#{string1}) === normalize(#{string2});\n    })()\n    `\n}","arguments":[{"type":"String","name":"string1"},{"type":"String","name":"string2"}]},{"description":"<p>Removes all occurances of the given character from the end of the\ngiven string.</p>\n<pre><code>String.rchop(&quot;!&quot;, &quot;Hello!!!&quot;) == &quot;Hello&quot;\n</code></pre>\n","type":"String","name":"rchop","source":"/*\nRemoves all occurances of the given character from the end of the\n given string.\n\n   String.rchop(\"!\", \"Hello!!!\") == \"Hello\"\n*/\nfun rchop (char : String, string : String) : String {\n  `\n    (() => {\n      while (#{string}.slice(-#{char}.length) == #{char}) {\n        #{string} = #{string}.slice(0,-#{char}.length)\n      }\n\n      return #{string}\n    })()\n    `\n}","arguments":[{"type":"String","name":"char"},{"type":"String","name":"string"}]},{"description":"<p>Removes all occurances of the given character from the start of the\ngiven string.</p>\n<pre><code>String.lchop(&quot;!&quot;, &quot;!!!Hello&quot;) == &quot;Hello&quot;\n</code></pre>\n","type":"String","name":"lchop","source":"/*\nRemoves all occurances of the given character from the start of the\n given string.\n\n   String.lchop(\"!\", \"!!!Hello\") == \"Hello\"\n*/\nfun lchop (char : String, string : String) : String {\n  `\n    (() => {\n      while (#{string}.slice(0, #{char}.length) == #{char}) {\n        #{string} = #{string}.slice(#{char}.length)\n      }\n\n      return #{string}\n    })()\n    `\n}","arguments":[{"type":"String","name":"char"},{"type":"String","name":"string"}]},{"description":"<p>Replaces the given pattern with the replacemet.</p>\n<pre><code>String.replace(&quot;a&quot;, &quot;0&quot;, &quot;aaaa&quot;) == &quot;0000&quot;\n</code></pre>\n","type":"String","name":"replace","source":"/*\nReplaces the given pattern with the replacemet.\n\n   String.replace(\"a\", \"0\", \"aaaa\") == \"0000\"\n*/\nfun replace (\n  pattern : String,\n  replacement : String,\n  string : String\n) : String {\n  `#{string}.replace(new RegExp(#{pattern}, 'g'), #{replacement})`\n}","arguments":[{"type":"String","name":"pattern"},{"type":"String","name":"replacement"},{"type":"String","name":"string"}]}]},{"description":"<p>A module for writing complex tests.</p>\n","name":"Test.Context","functions":[{"description":"<p>Starts a test using the given value.</p>\n<pre><code>test {\n  with Test.Context {\n    of(5)\n    |&gt; Test.assertEqual(5)\n  }\n}\n</code></pre>\n","type":"Test.Context(a)","name":"of","source":"/*\nStarts a test using the given value.\n\n  test {\n    with Test.Context {\n      of(5)\n      |> Test.assertEqual(5)\n    }\n  }\n*/\nfun of (a : a) : Test.Context(a) {\n  `new TestContext(#{a})`\n}","arguments":[{"type":"a","name":"a"}]},{"description":"<p>Adds a transformation step to the test.</p>\n<pre><code>test {\n  with Test.Context {\n    of(5)\n    |&gt; then(\\number : Number =&gt; Promise.resolve(number + 2))\n    |&gt; assertEqual(7)\n  }\n}\n</code></pre>\n","type":"Test.Context(c)","name":"then","source":"/*\nAdds a transformation step to the test.\n\n  test {\n    with Test.Context {\n      of(5)\n      |> then(\\number : Number => Promise.resolve(number + 2))\n      |> assertEqual(7)\n    }\n  }\n*/\nfun then (\n  proc : Function(a, Promise(b, c)),\n  context : Test.Context(a)\n) : Test.Context(c) {\n  `\n    #{context}.step((subject)=> {\n      return #{proc}(subject)\n    })\n    `\n}","arguments":[{"type":"Function(a, Promise(b, c))","name":"proc"},{"type":"Test.Context(a)","name":"context"}]},{"description":"<p>Adds a timeout to the text using the given duration (in milliseconds).</p>\n","type":"Test.Context(a)","name":"timeout","source":"/* Adds a timeout to the text using the given duration (in milliseconds). */\nfun timeout (duration : Number, context : Test.Context(a)) : Test.Context(a) {\n  then(\n    (subject : a) : Promise(Never, a) { Timer.timeout(duration, subject) }, \n    context)\n}","arguments":[{"type":"Number","name":"duration"},{"type":"Test.Context(a)","name":"context"}]},{"description":"<p>Asserts the equality of the current value of the test with the given one.</p>\n<pre><code>test {\n  with Test.Context {\n    of(5)\n    |&gt; Test.assertEqual(5)\n  }\n}\n</code></pre>\n","type":"Test.Context(a)","name":"assertEqual","source":"/*\nAsserts the equality of the current value of the test with the given one.\n\n  test {\n    with Test.Context {\n      of(5)\n      |> Test.assertEqual(5)\n    }\n  }\n*/\nfun assertEqual (a : a, context : Test.Context(a)) : Test.Context(a) {\n  `\n    #{context}.step((subject)=> {\n      let result = _compare(#{a}, subject)\n\n      if (result) {\n        return subject\n      } else {\n        throw \\`Assertion failed ${#{a}} === ${subject}\\`\n      }\n    })\n    `\n}","arguments":[{"type":"a","name":"a"},{"type":"Test.Context(a)","name":"context"}]},{"description":null,"type":"Test.Context(a)","name":"assertOf","source":"fun assertOf (\n  value : b,\n  method : Function(a, b),\n  context : Test.Context(a)\n) : Test.Context(a) {\n  `\n    #{context}.step((item) => {\n      let actual = #{method}(item)\n\n      if (actual == #{value}) {\n        return item\n      } else {\n        throw \\`Assertion failed ${actual} === ${value}\\`\n      }\n    })\n    `\n}","arguments":[{"type":"b","name":"value"},{"type":"Function(a, b)","name":"method"},{"type":"Test.Context(a)","name":"context"}]},{"description":null,"type":"Test.Context(b)","name":"map","source":"fun map (method : Function(a, b), context : Test.Context(a)) : Test.Context(b) {\n  then(\n    (item : a) : Promise(Never, Test.Context(a)) { Promise.resolve(method(item)) }, \n    context)\n}","arguments":[{"type":"Function(a, b)","name":"method"},{"type":"Test.Context(a)","name":"context"}]}]},{"description":"<p>Module for testing <code>Html</code></p>\n","name":"Test.Html","functions":[{"description":"<p>Starts a test of an <code>Html</code> node.</p>\n<pre><code>Test.Html.start(&lt;div&gt;&lt;{ &quot;Content&quot; }&gt;&lt;/div&gt;)\n</code></pre>\n","type":"Test.Context(Dom.Element)","name":"start","source":"/*\nStarts a test of an `Html` node.\n\n  Test.Html.start(<div><{ \"Content\" }></div>)\n*/\nfun start (node : Html) : Test.Context(Dom.Element) {\n  `\n    (() => {\n      let root = document.createElement('div')\n      document.body.appendChild(root)\n      ReactDOM.render(#{node}, root)\n      return new TestContext(root, () => {\n        ReactDOM.unmountComponentAtNode(root)\n        document.body.removeChild(root)\n      })\n    })()\n    `\n}","arguments":[{"type":"Html","name":"node"}]},{"description":null,"type":"Test.Context(Dom.Element)","name":"find","source":"fun find (\n  selector : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      let subject = element.querySelector(#{selector})\n\n      if (subject) {\n        return subject\n      } else {\n        throw \\`Could not find element with selector: ${#{selector}}\\`\n      }\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":null,"type":"Test.Context(Dom.Element)","name":"findGlobally","source":"fun findGlobally (\n  selector : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      let subject = document.querySelector(#{selector})\n\n      if (subject) {\n        return subject\n      } else {\n        throw \\`Could not find element with selector: ${#{selector}}\\`\n      }\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":null,"type":"Test.Context(Dom.Element)","name":"assertTop","source":"fun assertTop (top : Number, context : Test.Context(Dom.Element)) : Test.Context(Dom.Element) {\n  Test.Context.assertOf(\n    top, \n    (element : Dom.Element) : Number {\n      try {\n        dimensions =\n          Dom.getDimensions(element)\n\n        dimensions.top\n      }\n    }, \n    context)\n}","arguments":[{"type":"Number","name":"top"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":null,"type":"Test.Context(Dom.Element)","name":"assertLeft","source":"fun assertLeft (left : Number, context : Test.Context(Dom.Element)) : Test.Context(Dom.Element) {\n  Test.Context.assertOf(\n    left, \n    (element : Dom.Element) : Number {\n      try {\n        dimensions =\n          Dom.getDimensions(element)\n\n        dimensions.left\n      }\n    }, \n    context)\n}","arguments":[{"type":"Number","name":"left"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":null,"type":"Test.Context(Dom.Element)","name":"assertHeight","source":"fun assertHeight (height : Number, context : Test.Context(Dom.Element)) : Test.Context(Dom.Element) {\n  Test.Context.assertOf(\n    height, \n    (element : Dom.Element) : Number {\n      try {\n        dimensions =\n          Dom.getDimensions(element)\n\n        dimensions.height\n      }\n    }, \n    context)\n}","arguments":[{"type":"Number","name":"height"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":null,"type":"Test.Context(Dom.Element)","name":"assertWidth","source":"fun assertWidth (width : Number, context : Test.Context(Dom.Element)) : Test.Context(Dom.Element) {\n  Test.Context.assertOf(\n    width, \n    (element : Dom.Element) : Number {\n      try {\n        dimensions =\n          Dom.getDimensions(element)\n\n        dimensions.width\n      }\n    }, \n    context)\n}","arguments":[{"type":"Number","name":"width"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":"<p>Triggers a click event on the element that matches the given selector.</p>\n","type":"Test.Context(Dom.Element)","name":"triggerClick","source":"/* Triggers a click event on the element that matches the given selector. */\nfun triggerClick (\n  selector : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      element.querySelector(#{selector}).click()\n      return element\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":"<p>Triggers a mouse down event on the element that matches the given selector.</p>\n","type":"Test.Context(Dom.Element)","name":"triggerMouseDown","source":"/* Triggers a mouse down event on the element that matches the given selector. */\nfun triggerMouseDown (\n  selector : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      let event = document.createEvent ('MouseEvents')\n      event.initEvent (\"mousedown\", true, true)\n      element.querySelector(#{selector}).dispatchEvent(event)\n      return element\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":"<p>Triggers a mouse move event on the element that matches the given selector.</p>\n","type":"Test.Context(Dom.Element)","name":"triggerMouseMove","source":"/* Triggers a mouse move event on the element that matches the given selector. */\nfun triggerMouseMove (\n  selector : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      let event = document.createEvent ('MouseEvents')\n      event.initEvent (\"mousemove\", true, true)\n      element.querySelector(#{selector}).dispatchEvent(event)\n      return element\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":"<p>Triggers a mouse up event on the element that matches the given selector.</p>\n","type":"Test.Context(Dom.Element)","name":"triggerMouseUp","source":"/* Triggers a mouse up event on the element that matches the given selector. */\nfun triggerMouseUp (\n  selector : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      let event = document.createEvent ('MouseEvents')\n      event.initEvent (\"mouseup\", true, true)\n      element.querySelector(#{selector}).dispatchEvent(event)\n      return element\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":"<p>Asserts the text of the element that matches the given selector.</p>\n","type":"Test.Context(Dom.Element)","name":"assertTextOf","source":"/* Asserts the text of the element that matches the given selector. */\nfun assertTextOf (\n  selector : String,\n  value : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      let text = \"\";\n\n      try {\n        text = element.querySelector(#{selector}).textContent\n      } catch (error) {\n        throw \\`Could not find element with selector: ${#{selector}}\\`\n      }\n\n      if (text == #{value}) {\n        return element\n      } else {\n        throw \\`\"${text}\" != \"${#{value}}\"\\`\n      }\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"String","name":"value"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":null,"type":"Test.Context(Dom.Element)","name":"assertActiveElement","source":"fun assertActiveElement (\n  selector : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      let subject = element.querySelector(#{selector})\n\n      if (subject) {\n        if (subject == document.activeElement) {\n          return subject\n        }  else {\n          throw \\`Element is not active ${subject}\\`\n        }\n      } else {\n        throw \\`Could not find element with selector: ${#{selector}}\\`\n      }\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":"<p>Asserts that there is an element that matches the given selector.</p>\n","type":"Test.Context(Dom.Element)","name":"assertElementExists","source":"/* Asserts that there is an element that matches the given selector. */\nfun assertElementExists (\n  selector : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      let subject = element.querySelector(#{selector})\n\n      if (subject) {\n        return element\n      } else {\n        throw \\`Could not find element with selector: ${#{selector}}\\`\n      }\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"Test.Context(Dom.Element)","name":"context"}]},{"description":"<p>Asserts the value of a css property on the element that matches the given selector.</p>\n","type":"Test.Context(Dom.Element)","name":"assertCSSOf","source":"/* Asserts the value of a css property on the element that matches the given selector. */\nfun assertCSSOf (\n  selector : String,\n  property : String,\n  value : String,\n  context : Test.Context(Dom.Element)\n) : Test.Context(Dom.Element) {\n  `\n    #{context}.step((element) => {\n      let subject = element.querySelector(#{selector})\n\n      if (subject) {\n        let actual = getComputedStyle(subject)[#{property}]\n\n        if (actual == #{value}) {\n          return element\n        } else {\n          throw \\`Style did not match expected \"${#{value}}\" got \"${actual}\"\\`\n        }\n      } else {\n        throw \\`Could not find element with selector: ${#{selector}}\\`\n      }\n    })\n    `\n}","arguments":[{"type":"String","name":"selector"},{"type":"String","name":"property"},{"type":"String","name":"value"},{"type":"Test.Context(Dom.Element)","name":"context"}]}]},{"description":"<p>Utility functions for the window when testing.</p>\n","name":"Test.Window","functions":[{"description":"<p>Sets the horizontal scroll position of the window during a test.</p>\n","type":"Test.Context(a)","name":"setScrollLeft","source":"/* Sets the horizontal scroll position of the window during a test. */\nfun setScrollLeft (to : Number, context : Test.Context(a)) : Test.Context(a) {\n  Test.Context.then(\n    (subject : Dom.Element) : Promise(Never, a) {\n      try {\n        Window.setScrollLeft(100)\n        Promise.resolve(subject)\n      }\n    }, \n    context)\n}","arguments":[{"type":"Number","name":"to"},{"type":"Test.Context(a)","name":"context"}]},{"description":"<p>Sets the vertical scroll position of the window during a test.</p>\n","type":"Test.Context(a)","name":"setScrollTop","source":"/* Sets the vertical scroll position of the window during a test. */\nfun setScrollTop (to : Number, context : Test.Context(a)) : Test.Context(a) {\n  Test.Context.then(\n    (subject : Dom.Element) : Promise(Never, a) {\n      try {\n        Window.setScrollTop(100)\n        Promise.resolve(subject)\n      }\n    }, \n    context)\n}","arguments":[{"type":"Number","name":"to"},{"type":"Test.Context(a)","name":"context"}]}]},{"description":"<p>Utility functions for working with <code>Time</code>.</p>\n<p><em>THIS MODULE IS STILL WORK IN PROGRESS</em></p>\n","name":"Time","functions":[{"description":"<p>Tries to parse the given string as an ISO date.</p>\n<pre><code>Time.fromIso(&quot;2018-04-05T00:00:00.000Z&quot;)\n</code></pre>\n","type":"Maybe(Time)","name":"fromIso","source":"/*\nTries to parse the given string as an ISO date.\n\n  Time.fromIso(\"2018-04-05T00:00:00.000Z\")\n*/\nfun fromIso (raw : String) : Maybe(Time) {\n  `\n    (() => {\n      try {\n        return #{Maybe::Just(`new Date(#{raw})`)}\n      } catch (error) {\n        return #{Maybe::Nothing}\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"raw"}]},{"description":"<p>Formats the given time to the ISO format.</p>\n<pre><code>Time.toIso(Tome.today()) == &quot;2018-04-05T00:00:00.000Z&quot;\n</code></pre>\n","type":"String","name":"toIso","source":"/*\nFormats the given time to the ISO format.\n\n  Time.toIso(Tome.today()) == \"2018-04-05T00:00:00.000Z\"\n*/\nfun toIso (date : Time) : String {\n  `#{date}.toISOString()`\n}","arguments":[{"type":"Time","name":"date"}]},{"description":"<p>Returns the current time.</p>\n","type":"Time","name":"now","source":"/* Returns the current time. */\nfun now : Time {\n  `new Date()`\n}","arguments":[]},{"description":"<p>Returns the time of the begging of today.</p>\n","type":"Time","name":"today","source":"/* Returns the time of the begging of today. */\nfun today : Time {\n  `\n    (() => {\n      const date = new Date()\n\n      return new Date(Date.UTC(\n        date.getUTCFullYear(),\n        date.getUTCMonth(),\n        date.getUTCDate()\n      ))\n    })()\n    `\n}","arguments":[]},{"description":"<p>Retruns a new UTC date from the given parameters.</p>\n<pre><code>Time.from(2018, 4, 5)\n</code></pre>\n","type":"Time","name":"from","source":"/*\nRetruns a new UTC date from the given parameters.\n\n  Time.from(2018, 4, 5)\n*/\nfun from (year : Number, month : Number, day : Number) : Time {\n  `new Date(Date.UTC(#{year}, #{month} - 1, #{day}))`\n}","arguments":[{"type":"Number","name":"year"},{"type":"Number","name":"month"},{"type":"Number","name":"day"}]},{"description":"<p>Returns the UTC day of the given time.</p>\n<pre><code>(Time.from(2018, 4, 5)\n|&gt; Time.day()) == 5\n</code></pre>\n","type":"Number","name":"day","source":"/*\nReturns the UTC day of the given time.\n\n  (Time.from(2018, 4, 5)\n  |> Time.day()) == 5\n*/\nfun day (date : Time) : Number {\n  `#{date}.getUTCDate()`\n}","arguments":[{"type":"Time","name":"date"}]},{"description":"<p>Returns the UTC month of the given time.</p>\n<pre><code>(Time.from(2018, 4, 5)\n|&gt; Time.month()) == 4\n</code></pre>\n","type":"Number","name":"month","source":"/*\nReturns the UTC month of the given time.\n\n  (Time.from(2018, 4, 5)\n  |> Time.month()) == 4\n*/\nfun month (date : Time) : Number {\n  `(#{date}.getUTCMonth() + 1)`\n}","arguments":[{"type":"Time","name":"date"}]},{"description":"<p>Returns the UTC year of the given time.</p>\n<pre><code>(Time.from(2018, 4, 5)\n|&gt; Time.year()) == 2018\n</code></pre>\n","type":"Number","name":"year","source":"/*\nReturns the UTC year of the given time.\n\n  (Time.from(2018, 4, 5)\n  |> Time.year()) == 2018\n*/\nfun year (date : Time) : Number {\n  `#{date}.getUTCFullYear()`\n}","arguments":[{"type":"Time","name":"date"}]},{"description":"<p>Formats the time using the given pattern.</p>\n","type":"String","name":"format","source":"/* Formats the time using the given pattern. */\nfun format (pattern : String, date : Time) : String {\n  `DateFNS.format(#{date}, #{pattern})`\n}","arguments":[{"type":"String","name":"pattern"},{"type":"Time","name":"date"}]},{"description":"<p>Returns the start of the day / month / week of the given time.</p>\n","type":"Time","name":"startOf","source":"/* Returns the start of the day / month / week of the given time. */\nfun startOf (what : String, date : Time) : Time {\n  `\n    (() => {\n      switch (#{what}) {\n        case 'month':\n          return DateFNS.startOfMonth(#{date})\n        case 'week':\n          return DateFNS.startOfWeek(#{date}, { weekStartsOn: 1 })\n        case 'day':\n          return DateFNS.startOfDay(#{date})\n        default:\n          return #{date}\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"what"},{"type":"Time","name":"date"}]},{"description":"<p>Returns the end of the day / month / week of the given time.</p>\n","type":"Time","name":"endOf","source":"/* Returns the end of the day / month / week of the given time. */\nfun endOf (what : String, date : Time) : Time {\n  `\n    (() => {\n      switch (#{what}) {\n        case 'month':\n          return DateFNS.endOfMonth(#{date})\n        case 'week':\n          return DateFNS.endOfWeek(#{date}, { weekStartsOn: 1 })\n        case 'day':\n          return DateFNS.endOfDay(#{date})\n        default:\n          return #{date}\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"what"},{"type":"Time","name":"date"}]},{"description":"<p>Returns an array of days from the given start to given end time.</p>\n","type":"Array(Time)","name":"range","source":"/* Returns an array of days from the given start to given end time. */\nfun range (from : Time, to : Time) : Array(Time) {\n  `DateFNS.eachDay(#{from}, #{to})`\n}","arguments":[{"type":"Time","name":"from"},{"type":"Time","name":"to"}]},{"description":"<p>Returns the next month from the given time.</p>\n","type":"Time","name":"nextMonth","source":"/* Returns the next month from the given time. */\nfun nextMonth (date : Time) : Time {\n  `\n    (() => {\n      return DateFNS.addMonths(#{date}, 1)\n    })()\n    `\n}","arguments":[{"type":"Time","name":"date"}]},{"description":"<p>Returns the previous month from the given time.</p>\n","type":"Time","name":"previousMonth","source":"/* Returns the previous month from the given time. */\nfun previousMonth (date : Time) : Time {\n  `\n    (() => {\n      return DateFNS.addMonths(#{date}, -1)\n    })()\n    `\n}","arguments":[{"type":"Time","name":"date"}]},{"description":"<p>Returns the relative time from the given times (in english).</p>\n","type":"String","name":"relative","source":"/* Returns the relative time from the given times (in english). */\nfun relative (other : Time, now : Time) : String {\n  `\n    (() => {\n      return DateFNS.distanceInWordsStrict(#{now}, #{other}, { addSuffix: true })\n    })()\n    `\n}","arguments":[{"type":"Time","name":"other"},{"type":"Time","name":"now"}]}]},{"description":"<p>Time related utility functions.</p>\n","name":"Timer","functions":[{"description":"<p>Returns a promise which resovles after the given number of time in\nmilliseconds.</p>\n","type":"Promise(Never, a)","name":"timeout","source":"/*\nReturns a promise which resovles after the given number of time in\nmilliseconds.\n*/\nfun timeout (duration : Number, subject : a) : Promise(Never, a) {\n  `\n    new Promise((resolve) => {\n    \tsetTimeout(() => {\n        resolve(#{subject})\n      }, #{duration})\n    })\n    `\n}","arguments":[{"type":"Number","name":"duration"},{"type":"a","name":"subject"}]},{"description":"<p>Returns a promise which resolves after the next <code>animationFrame</code>.</p>\n","type":"Promise(Never, a)","name":"nextFrame","source":"/* Returns a promise which resolves after the next `animationFrame`. */\nfun nextFrame (subject : a) : Promise(Never, a) {\n  `\n    new Promise((resolve) => {\n    \trequestAnimationFrame(() => {\n        resolve(#{subject})\n      })\n    })\n    `\n}","arguments":[{"type":"a","name":"subject"}]}]},{"description":"<p>A module for generating unique identifiers.</p>\n","name":"Uid","functions":[{"description":"<p>Generates a unique identifier.</p>\n","type":"String","name":"generate","source":"/* Generates a unique identifier. */\nfun generate : String {\n  `\n    ([1e7] + -1e3 + -4e3 + -8e3 + -1e11)\n      .replace(/[018]/g, c =>\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4)\n          .toString(16))\n    `\n}","arguments":[]}]},{"description":"<p>Utility functions for working with <code>Url</code></p>\n","name":"Url","functions":[{"description":"<p>Parses the given string as an <code>Url</code>.</p>\n","type":"Url","name":"parse","source":"/* Parses the given string as an `Url`. */\nfun parse (url : String) : Url {\n  `\n    (() => {\n      if (!this._a) {\n        this._a = document.createElement('a')\n      }\n\n      this._a.href = #{url}\n\n      return #{{\n  hostname = `this._a.hostname || \"\"`,\n  protocol = `this._a.protocol || \"\"`,\n  origin = `this._a.origin || \"\"`,\n  path = `this._a.pathname || \"\"`,\n  search = `this._a.search || \"\"`,\n  hash = `this._a.hash || \"\"`,\n  host = `this._a.host || \"\"`,\n  port = `this._a.port || \"\"`\n}}\n    })()\n    `\n}","arguments":[{"type":"String","name":"url"}]},{"description":"<p>Creates an url from the given content and type, which is available until the\ncurrent window is closed.</p>\n<pre><code>Url.createObjectUrlFromString(&quot;Content&quot;, &quot;text/html&quot;)\n</code></pre>\n","type":"String","name":"createObjectUrlFromString","source":"/*\nCreates an url from the given content and type, which is available until the\ncurrent window is closed.\n\n  Url.createObjectUrlFromString(\"Content\", \"text/html\")\n*/\nfun createObjectUrlFromString (string : String, type : String) : String {\n  `\n    (() => {\n      let blob = new Blob([#{string}], {type : #{type}})\n      return URL.createObjectURL(blob)\n    })()\n    `\n}","arguments":[{"type":"String","name":"string"},{"type":"String","name":"type"}]},{"description":"<p>Creates an url from the given file, which is available until the current\nwindow is closed.</p>\n<pre><code>File.fromString(&quot;Content&quot;, &quot;test.html&quot;, &quot;text/html&quot;)\n|&gt; Url.createObjectUrlFromFile()\n</code></pre>\n","type":"String","name":"createObjectUrlFromFile","source":"/*\nCreates an url from the given file, which is available until the current\nwindow is closed.\n\n  File.fromString(\"Content\", \"test.html\", \"text/html\")\n  |> Url.createObjectUrlFromFile()\n*/\nfun createObjectUrlFromFile (file : File) : String {\n  `URL.createObjectURL(#{file})`\n}","arguments":[{"type":"File","name":"file"}]},{"description":"<p>Releases an existing object URL which was previously created.</p>\n<pre><code>Url.createObjectUrlFromString(&quot;Content&quot;, &quot;text/html&quot;)\n|&gt; Url.revokeObjectUrl()\n</code></pre>\n","type":"Void","name":"revokeObjectUrl","source":"/*\nReleases an existing object URL which was previously created.\n\n  Url.createObjectUrlFromString(\"Content\", \"text/html\")\n  |> Url.revokeObjectUrl()\n*/\nfun revokeObjectUrl (url : String) : Void {\n  `URL.revokeObjectURL(#{url})`\n}","arguments":[{"type":"String","name":"url"}]}]},{"description":null,"name":"Window","functions":[{"description":"<p>Navigates to the given URL.</p>\n","type":"Promise(Never, Void)","name":"navigate","source":"/* Navigates to the given URL. */\nfun navigate (url : String) : Promise(Never, Void) {\n  `_navigate(#{url})`\n}","arguments":[{"type":"String","name":"url"}]},{"description":"<p>Sets the URL of the window without navigating to it.</p>\n","type":"Promise(Never, Void)","name":"setUrl","source":"/* Sets the URL of the window without navigating to it. */\nfun setUrl (url : String) : Promise(Never, Void) {\n  `_navigate(#{url}, false)`\n}","arguments":[{"type":"String","name":"url"}]},{"description":"<p>Returns the windows title.</p>\n","type":"String","name":"title","source":"/* Returns the windows title. */\nfun title : String {\n  `document.title`\n}","arguments":[]},{"description":"<p>Sets the windows title.</p>\n","type":"Promise(Never, Void)","name":"setTitle","source":"/* Sets the windows title. */\nfun setTitle (title : String) : Promise(Never, Void) {\n  `document.title = #{title}`\n}","arguments":[{"type":"String","name":"title"}]},{"description":"<p>Returns the current <code>Url</code> of the window.</p>\n","type":"Url","name":"url","source":"/* Returns the current `Url` of the window. */\nfun url : Url {\n  Url.parse(href())\n}","arguments":[]},{"description":"<p>Returns the windows URL as a string.</p>\n","type":"String","name":"href","source":"/* Returns the windows URL as a string. */\nfun href : String {\n  `window.location.href`\n}","arguments":[]},{"description":"<p>Returns the width of the window in pixels.</p>\n","type":"Number","name":"width","source":"/* Returns the width of the window in pixels. */\nfun width : Number {\n  `window.innerWidth`\n}","arguments":[]},{"description":"<p>Returns the height of the window in pixels.</p>\n","type":"Number","name":"height","source":"/* Returns the height of the window in pixels. */\nfun height : Number {\n  `window.innerHeight`\n}","arguments":[]},{"description":"<p>Returns the scrollable height of the window in pixels.</p>\n","type":"Number","name":"scrollHeight","source":"/* Returns the scrollable height of the window in pixels. */\nfun scrollHeight : Number {\n  `document.body.scrollHeight`\n}","arguments":[]},{"description":"<p>Returns the scrollable width of the window in pixels.</p>\n","type":"Number","name":"scrollWidth","source":"/* Returns the scrollable width of the window in pixels. */\nfun scrollWidth : Number {\n  `document.body.scrollWidth`\n}","arguments":[]},{"description":"<p>Returns the horizontal scroll position of the window in pixels.</p>\n","type":"Number","name":"scrollLeft","source":"/* Returns the horizontal scroll position of the window in pixels. */\nfun scrollLeft : Number {\n  `document.body.scrollLeft`\n}","arguments":[]},{"description":"<p>Returns the vertical scroll position of the window in pixels.</p>\n","type":"Number","name":"scrollTop","source":"/* Returns the vertical scroll position of the window in pixels. */\nfun scrollTop : Number {\n  `document.body.scrollTop`\n}","arguments":[]},{"description":"<p>Sets the horizontal scroll position of the window in pixels.</p>\n","type":"Promise(Never, Void)","name":"setScrollTop","source":"/* Sets the horizontal scroll position of the window in pixels. */\nfun setScrollTop (position : Number) : Promise(Never, Void) {\n  `window.scrollTo(#{scrollTop()}, #{position})`\n}","arguments":[{"type":"Number","name":"position"}]},{"description":"<p>Sets the vertical scroll position of the window in pixels.</p>\n","type":"Promise(Never, Void)","name":"setScrollLeft","source":"/* Sets the vertical scroll position of the window in pixels. */\nfun setScrollLeft (position : Number) : Promise(Never, Void) {\n  `window.scrollTo(#{position}, #{scrollLeft()})`\n}","arguments":[{"type":"Number","name":"position"}]},{"description":"<p>Shows the default confirm popup of the browser with the given message.\nThis function returns a promise but blocks execution until the popup is\nclosed.</p>\n","type":"Promise(String, Void)","name":"confirm","source":"/*\nShows the default confirm popup of the browser with the given message.\nThis function returns a promise but blocks execution until the popup is\nclosed.\n*/\nfun confirm (message : String) : Promise(String, Void) {\n  `\n    (() => {\n      let result = window.confirm(#{message})\n\n      if (result) {\n        return result;\n      } else {\n        return Promise.reject(\"User cancelled!\")\n      }\n    })()\n    `\n}","arguments":[{"type":"String","name":"message"}]}]}],"providers":[{"description":"<p>A provider for the <code>requestAnimationFrame</code> API.</p>\n","subscription":"Provider.AnimationFrame.Subscription","name":"Provider.AnimationFrame","functions":[{"description":"<p>Updates the subscribers.</p>\n","type":"Array(a)","name":"update","source":"/* Updates the subscribers. */\nfun update : Array(a) {\n  subscriptions\n  |> Array.map(\n    (item : Provider.AnimationFrame.Subscription) : Function(a) { item.frames })\n  |> Array.map((func : Function(a)) : a { func() })\n}","arguments":[]},{"description":"<p>Attaches the provider.</p>\n","type":"Void","name":"attach","source":"/* Attaches the provider. */\nfun attach : Void {\n  `\n    (() => {\n      this.detach()\n\n      const fn = () => {\n        requestAnimationFrame(() => {\n          #{update()}\n          fn()\n        })\n      }\n\n      this.id = fn()\n    })()\n    `\n}","arguments":[]},{"description":"<p>Detaches the provider.</p>\n","type":"Void","name":"detach","source":"/* Detaches the provider. */\nfun detach : Void {\n  `cancelAnimationFrame(this.id)`\n}","arguments":[]}]},{"description":"<p>A provider for global mouse events.</p>\n","subscription":"Provider.Mouse.Subscription","name":"Provider.Mouse","functions":[{"description":"<p>Calls the <code>moves</code> function on the subscribers with the given event.</p>\n","type":"Array(a)","name":"moves","source":"/* Calls the `moves` function on the subscribers with the given event. */\nfun moves (event : Html.Event) : Array(a) {\n  subscriptions\n  |> Array.map(\n    (subcription : Provider.Mouse.Subscription) : Function(Html.Event, a) { subcription.moves })\n  |> Array.map(\n    (func : Function(Html.Event, a)) : a { func(event) })\n}","arguments":[{"type":"Html.Event","name":"event"}]},{"description":"<p>Calls the <code>clicks</code> function on the subscribers with the given event.</p>\n","type":"Array(a)","name":"clicks","source":"/* Calls the `clicks` function on the subscribers with the given event. */\nfun clicks (event : Html.Event) : Array(a) {\n  subscriptions\n  |> Array.map(\n    (subcription : Provider.Mouse.Subscription) : Function(Html.Event, a) { subcription.clicks })\n  |> Array.map(\n    (func : Function(Html.Event, a)) : a { func(event) })\n}","arguments":[{"type":"Html.Event","name":"event"}]},{"description":"<p>Calls the <code>ups</code> function on the subscribers with the given event.</p>\n","type":"Array(a)","name":"ups","source":"/* Calls the `ups` function on the subscribers with the given event. */\nfun ups (event : Html.Event) : Array(a) {\n  subscriptions\n  |> Array.map(\n    (subcription : Provider.Mouse.Subscription) : Function(Html.Event, a) { subcription.ups })\n  |> Array.map(\n    (func : Function(Html.Event, a)) : a { func(event) })\n}","arguments":[{"type":"Html.Event","name":"event"}]},{"description":"<p>Attaches the provider.</p>\n","type":"Void","name":"attach","source":"/* Attaches the provider. */\nfun attach : Void {\n  `\n    (() => {\n      const clicks = this._clicks || (this._clicks = ((event) => #{clicks}(_normalizeEvent(event))))\n      const moves = this._moves || (this._moves = ((event) => #{moves}(_normalizeEvent(event))))\n      const ups = this._ups || (this._ups = ((event) => #{ups}(_normalizeEvent(event))))\n\n      window.addEventListener(\"click\", clicks, true)\n      window.addEventListener(\"mousemove\", moves)\n      window.addEventListener(\"mouseup\", ups)\n    })()\n    `\n}","arguments":[]},{"description":"<p>Detaches the provider.</p>\n","type":"Void","name":"detach","source":"/* Detaches the provider. */\nfun detach : Void {\n  `\n    (() => {\n      window.removeEventListener(\"click\", this._clicks, true)\n      window.removeEventListener(\"mousemove\", this._moves)\n      window.removeEventListener(\"mouseup\", this._ups)\n    })()\n    `\n}","arguments":[]}]},{"description":"<p>A provider for global scroll events.</p>\n","subscription":"Provider.Scroll.Subscription","name":"Provider.Scroll","functions":[{"description":"<p>Calls the <code>scrolls</code> function of the subscribers with the given value.</p>\n","type":"Array(a)","name":"scrolls","source":"/* Calls the `scrolls` function of the subscribers with the given value. */\nfun scrolls (event : Html.Event) : Array(a) {\n  subscriptions\n  |> Array.map(\n    (subscription : Provider.Scroll.Subscription) : Function(Html.Event, a) { subscription.scrolls })\n  |> Array.map(\n    (method : Function(Html.Event, a)) : a { method(event) })\n}","arguments":[{"type":"Html.Event","name":"event"}]},{"description":"<p>Attaches the provider.</p>\n","type":"Void","name":"attach","source":"/* Attaches the provider. */\nfun attach : Void {\n  `\n    (() => {\n      const scrolls = this._scrolls || (this._scrolls = ((event) => #{scrolls}(_normalizeEvent(event))))\n\n      window.addEventListener(\"scroll\", scrolls)\n    })()\n    `\n}","arguments":[]},{"description":"<p>Detaches the provider.</p>\n","type":"Void","name":"detach","source":"/* Detaches the provider. */\nfun detach : Void {\n  `\n    (() => {\n      window.removeEventListener(\"mousemove\", this._scrolls)\n    })()\n    `\n}","arguments":[]}]},{"description":"<p>A provider for periodic updated (every 1 seconds).</p>\n","subscription":"Provider.Tick.Subscription","name":"Provider.Tick","functions":[{"description":"<p>Updates the subscribers.</p>\n","type":"Array(a)","name":"update","source":"/* Updates the subscribers. */\nfun update : Array(a) {\n  subscriptions\n  |> Array.map(\n    (item : Provider.Tick.Subscription) : Function(a) { item.ticks })\n  |> Array.map((func : Function(a)) : a { func() })\n}","arguments":[]},{"description":"<p>Attaches the provider.</p>\n","type":"Void","name":"attach","source":"/* Attaches the provider. */\nfun attach : Void {\n  `\n    (() => {\n      this.detach()\n      this.id = setInterval(#{update}.bind(this), 1000)\n    })()\n    `\n}","arguments":[]},{"description":"<p>Detaches the provider.</p>\n","type":"Void","name":"detach","source":"/* Detaches the provider. */\nfun detach : Void {\n  `clearInterval(this.id)`\n}","arguments":[]}]}],"records":[{"description":"<p>Record for the dimensions of an element on the screen.</p>\n","name":"Dom.Dimensions","fields":[{"key":"height","type":"Number","mapping":null},{"key":"bottom","type":"Number","mapping":null},{"key":"width","type":"Number","mapping":null},{"key":"right","type":"Number","mapping":null},{"key":"left","type":"Number","mapping":null},{"key":"top","type":"Number","mapping":null},{"key":"x","type":"Number","mapping":null},{"key":"y","type":"Number","mapping":null}]},{"description":"<p>Represents an HTML event.</p>\n","name":"Html.Event","fields":[{"key":"bubbles","type":"Bool","mapping":null},{"key":"cancelable","type":"Bool","mapping":null},{"key":"currentTarget","type":"Dom.Element","mapping":null},{"key":"defaultPrevented","type":"Bool","mapping":null},{"key":"eventPhase","type":"Number","mapping":null},{"key":"isTrusted","type":"Bool","mapping":null},{"key":"target","type":"Dom.Element","mapping":null},{"key":"timeStamp","type":"Number","mapping":null},{"key":"type","type":"String","mapping":null},{"key":"data","type":"String","mapping":null},{"key":"altKey","type":"Bool","mapping":null},{"key":"charCode","type":"Number","mapping":null},{"key":"ctrlKey","type":"Bool","mapping":null},{"key":"key","type":"String","mapping":null},{"key":"keyCode","type":"Number","mapping":null},{"key":"locale","type":"String","mapping":null},{"key":"location","type":"Number","mapping":null},{"key":"metaKey","type":"Bool","mapping":null},{"key":"repeat","type":"Bool","mapping":null},{"key":"shiftKey","type":"Bool","mapping":null},{"key":"which","type":"Number","mapping":null},{"key":"button","type":"Number","mapping":null},{"key":"buttons","type":"Number","mapping":null},{"key":"clientX","type":"Number","mapping":null},{"key":"clientY","type":"Number","mapping":null},{"key":"pageX","type":"Number","mapping":null},{"key":"pageY","type":"Number","mapping":null},{"key":"screenX","type":"Number","mapping":null},{"key":"screenY","type":"Number","mapping":null},{"key":"detail","type":"Number","mapping":null},{"key":"deltaMode","type":"Number","mapping":null},{"key":"deltaX","type":"Number","mapping":null},{"key":"deltaY","type":"Number","mapping":null},{"key":"deltaZ","type":"Number","mapping":null},{"key":"animationName","type":"String","mapping":null},{"key":"pseudoElement","type":"String","mapping":null},{"key":"propertyName","type":"String","mapping":null},{"key":"elapsedTime","type":"Number","mapping":null},{"key":"event","type":"Html.NativeEvent","mapping":null}]},{"description":"<p>Represents an HTTP request which failed to load.</p>\n","name":"Http.ErrorResponse","fields":[{"key":"type","type":"Http.Error","mapping":null},{"key":"status","type":"Number","mapping":null},{"key":"url","type":"String","mapping":null}]},{"description":"<p>Represents an HTTP request.</p>\n","name":"Http.Request","fields":[{"key":"headers","type":"Array(Http.Header)","mapping":null},{"key":"withCredentials","type":"Bool","mapping":null},{"key":"body","type":"Http.Body","mapping":null},{"key":"method","type":"String","mapping":null},{"key":"url","type":"String","mapping":null}]},{"description":"<p>Represents an HTTP response.</p>\n","name":"Http.Response","fields":[{"key":"status","type":"Number","mapping":null},{"key":"body","type":"String","mapping":null}]},{"description":"<p>Represents a subscription for <code>Provider.AnimationFrame</code></p>\n","name":"Provider.AnimationFrame.Subscription","fields":[{"key":"frames","type":"Function(Promise(Never, Void))","mapping":null}]},{"description":"<p>Represents a subscription for <code>Provider.Mouse</code></p>\n","name":"Provider.Mouse.Subscription","fields":[{"key":"clicks","type":"Function(Html.Event, Promise(Never, Void))","mapping":null},{"key":"moves","type":"Function(Html.Event, Promise(Never, Void))","mapping":null},{"key":"ups","type":"Function(Html.Event, Promise(Never, Void))","mapping":null}]},{"description":"<p>Represents a subscription for <code>Provider.Scroll</code></p>\n","name":"Provider.Scroll.Subscription","fields":[{"key":"scrolls","type":"Function(Html.Event, Promise(Never, Void))","mapping":null}]},{"description":"<p>Represents a subscription for <code>Provider.Tick</code></p>\n","name":"Provider.Tick.Subscription","fields":[{"key":"ticks","type":"Function(Promise(Never, Void))","mapping":null}]},{"description":"<p>Represents a regular expression match.</p>\n","name":"Regexp.Match","fields":[{"key":"submatches","type":"Array(String)","mapping":null},{"key":"match","type":"String","mapping":null},{"key":"index","type":"Number","mapping":null}]},{"description":"<p>Represents the options for a regular expression.</p>\n","name":"Regexp.Options","fields":[{"key":"caseInsensitive","type":"Bool","mapping":null},{"key":"multiline","type":"Bool","mapping":null},{"key":"unicode","type":"Bool","mapping":null},{"key":"global","type":"Bool","mapping":null},{"key":"sticky","type":"Bool","mapping":null}]},{"description":"<p>Represents a URL</p>\n","name":"Url","fields":[{"key":"hostname","type":"String","mapping":null},{"key":"protocol","type":"String","mapping":null},{"key":"origin","type":"String","mapping":null},{"key":"search","type":"String","mapping":null},{"key":"path","type":"String","mapping":null},{"key":"hash","type":"String","mapping":null},{"key":"host","type":"String","mapping":null},{"key":"port","type":"String","mapping":null}]}],"enums":[{"description":"<p>Represents the possible failures of an HTTP request.</p>\n","name":"Http.Error","parameters":[],"options":[{"description":"<p>The request cannot be loaded because of a network faliure</p>\n","name":"NetworkError","parameters":[]},{"description":"<p>The client (browser) aborted the request</p>\n","name":"Aborted","parameters":[]},{"description":"<p>The request timed out</p>\n","name":"Timeout","parameters":[]},{"description":"<p>The url is malformed and cannot be loaded</p>\n","name":"BadUrl","parameters":[]}]},{"description":null,"name":"Maybe","parameters":["a"],"options":[{"description":null,"name":"Nothing","parameters":[]},{"description":null,"name":"Just","parameters":["a"]}]},{"description":null,"name":"Result","parameters":["error","value"],"options":[{"description":null,"name":"Err","parameters":["error"]},{"description":null,"name":"Ok","parameters":["value"]}]},{"description":"<p>Represents the possible failures when dealing with the <code>Storage</code> API.</p>\n","name":"Storage.Error","parameters":[],"options":[{"description":"<p>The storage API is disabled.</p>\n","name":"SecurityError","parameters":[]},{"description":"<p>The storage is full (over the qouta, usually 5MB).</p>\n","name":"QuotaExceeded","parameters":[]},{"description":"<p>The key in the storage does not exists.</p>\n","name":"NotFound","parameters":[]},{"description":"<p>The reason for the faliure is unkown.</p>\n","name":"Unkown","parameters":[]}]}]}